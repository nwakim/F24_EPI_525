{
  "hash": "95bb076a02c2ebd2d57ec6bed0af9a77",
  "result": {
    "markdown": "---\ntitle: \"R04: Intro to Quarto doc, packages, and importing data\"\nauthor: \"Meike Niederhausen and Nicky Wakim\"\ntitle-slide-attributes:\n    data-background-color: \"#3070BF\"\ndate: \"10/7/2024\"\ncategories: [\"Week 2\"]\nformat: \n  revealjs:\n    theme: \"../simple_NW.scss\"\n    toc: true\n    toc-depth: 1\n    toc-title: Class Overview\n    chalkboard: true\n    slide-number: true\n    show-slide-number: all\n    width: 1600\n    height: 1100\n    footer: R2 Slides\n    html-math-method: mathjax\n    highlight-style: arrow\nexecute:\n  echo: true\n  freeze: auto\n---\n\n\n## How are data stored, how do we use them? \n\n- Often, data are in an Excel sheet, or a plain text file (.csv, .txt)\n- `.csv` files open in Excel automatically, but actually are plain text\n- Usually, columns are variables/measures and rows are observations (i.e. a person's measurements)\n\n### Data in R \n\n* We can import data from many file types, including .csv, .txt., and .xlsx\n    * We will cover this on a later date\n* Once imported, R typically stores data as __data frames__, or __tibbles__ if using the `tidyverse` package (more on this later).\n    * For our purposes, these are essentially the same, and I will tend to use the terms interchangeably.\n    * These are examples of what we call __object types__ in R.\n\n\n\n## Data frame example\n\n::: columns\n::: {.column width=\"54%\"}\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndf <- data.frame(\n  IDs=1:3, \n  gender=c(\"male\", \"female\", \"Male\"), \n  age=c(28, 35.5, 31),\n  trt = c(\"control\", \"1\", \"1\"),\n  Veteran = c(FALSE, TRUE, TRUE)\n  )\ndf\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n  IDs gender  age     trt Veteran\n1   1   male 28.0 control   FALSE\n2   2 female 35.5       1    TRUE\n3   3   Male 31.0       1    TRUE\n```\n:::\n:::\n\n\n* __Vectors__ vs. __data frames__\n    * a data frame is a collection (or array or table) of vectors\n\n:::\n\n::: {.column width=\"2%\"}\n:::\n\n::: {.column width=\"44%\"}\n::: {style=\"font-size: 90%;\"}\n* Different columns can be of different data types (i.e. numeric vs. text)\n* Both numeric and text can be stored within a column (stored together as *text*).\n\n* Vectors and data frames are examples of _**objects**_ in R. \n  + There are other types of R objects to store data, such as matrices, lists.\n:::\n:::\n:::\n\n\n## Observations & variables\n\n::: columns\n::: {.column width=\"60%\"}\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndf\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n  IDs gender  age     trt Veteran\n1   1   male 28.0 control   FALSE\n2   2 female 35.5       1    TRUE\n3   3   Male 31.0       1    TRUE\n```\n:::\n:::\n\n\n![[ISLBS](https://www.openintro.org/book/biostat/)](../img_slides/Fig1.8_variable_types.png){fig-align=\"center\"}\n\n:::\n::: {.column width=\"40%\"}\n::: {style=\"font-size: 90%;\"}\n* Book refers to a dataset as a _data matrix_ \n\n* Rows are usually __observations__\n* Columns are usually __variables__ \n\n\n* __[How many observations are in this dataset?]{style=\"color:green\"}__\n\n* __[What are the variable types in this dataset?]{style=\"color:green\"}__\n::: \n:::\n:::\n\n\n\n\n## Variable (column) types\n::: {style=\"font-size: 70%;\"}\nR type | variable type| description\n---|---|---\ninteger | discrete | integer-valued numbers\ndouble or numeric | continuous| numbers that are decimals\nfactor  | categorical | categorical variables stored with levels (groups)\ncharacter | categorical | text, \"strings\"\nlogical | categorical | boolean (TRUE, FALSE)\n\n<!-- Each variable (column) in a data frame can be of a different type. -->\n\n* View the __structure__ of our data frame to see what the variable types are:\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nstr(df)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n'data.frame':\t3 obs. of  5 variables:\n $ IDs    : int  1 2 3\n $ gender : chr  \"male\" \"female\" \"Male\"\n $ age    : num  28 35.5 31\n $ trt    : chr  \"control\" \"1\" \"1\"\n $ Veteran: logi  FALSE TRUE TRUE\n```\n:::\n:::\n\n\n<!-- * Note that the ID column is _integer_ type since the values are all whole numbers, although we likely would think of it as being a categorical variable and thus prefer it to be a factor. -->\n\n\n\n\n## Fisher's (or Anderson's) Iris data set \n\nData description: \n\n* n = 150 \n* 3 species of Iris flowers (Setosa, Virginica, and Versicolour)\n  + 50 measurements of each type of Iris\n* __variables__:\n  + sepal length, sepal width, petal length, petal width, and species\n\n_[Can the iris species be determined by these variables?]{style=\"color:purple\"}_\n\n<center><img src=\"../img_slides/Iris_types.png\" width=\"70%\" height=\"50%\"><img src=\"../img_slides/Iris_parts.png\" width=\"28%\" height=\"50%\"></center>\n[Gareth Duffy](https://github.com/Datagatherer2357/Gareth-Duffy-GMIT-Project)\n\n\n\n## View the `iris` dataset\n\n::: {style=\"font-size: 80%;\"}\n* The `iris` dataset is already pre-loaded in *base* R and ready to use.\n* Type the following command in the console window\n  - _Warning: this command cannot be rendered. It will give an error._\n:::\n\n\\\n\n:::columns\n::: {.column width=\"30%\"}\n\n::: {.cell}\n\n```{.r .cell-code}\nView(iris)\n```\n:::\n\n::: {style=\"font-size: 80%;\"}\nA new tab in the scripting window should appear with the `iris` dataset.\n:::\n:::\n\n::: {.column width=\"70%\"}\n\n![](../img_slides/screenshot_iris_View.png){fig-align=\"center\"}\n:::\n:::\n\n\n## Data structure\n\n* What are the different __variable types__ in this data set?\n\n\\\n\n\n::: {.cell}\n\n```{.r .cell-code}\nstr(iris)   # structure of data\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n'data.frame':\t150 obs. of  5 variables:\n $ Sepal.Length: num  5.1 4.9 4.7 4.6 5 5.4 4.6 5 4.4 4.9 ...\n $ Sepal.Width : num  3.5 3 3.2 3.1 3.6 3.9 3.4 3.4 2.9 3.1 ...\n $ Petal.Length: num  1.4 1.4 1.3 1.5 1.4 1.7 1.4 1.5 1.4 1.5 ...\n $ Petal.Width : num  0.2 0.2 0.2 0.2 0.2 0.4 0.3 0.2 0.2 0.1 ...\n $ Species     : Factor w/ 3 levels \"setosa\",\"versicolor\",..: 1 1 1 1 1 1 1 1 1 1 ...\n```\n:::\n:::\n\n\n\n\n\n## Data set summary\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsummary(iris)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n  Sepal.Length    Sepal.Width     Petal.Length    Petal.Width   \n Min.   :4.300   Min.   :2.000   Min.   :1.000   Min.   :0.100  \n 1st Qu.:5.100   1st Qu.:2.800   1st Qu.:1.600   1st Qu.:0.300  \n Median :5.800   Median :3.000   Median :4.350   Median :1.300  \n Mean   :5.843   Mean   :3.057   Mean   :3.758   Mean   :1.199  \n 3rd Qu.:6.400   3rd Qu.:3.300   3rd Qu.:5.100   3rd Qu.:1.800  \n Max.   :7.900   Max.   :4.400   Max.   :6.900   Max.   :2.500  \n       Species  \n setosa    :50  \n versicolor:50  \n virginica :50  \n                \n                \n                \n```\n:::\n:::\n\n\n\n\n## Data set info\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndim(iris)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 150   5\n```\n:::\n\n```{.r .cell-code}\nnrow(iris)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 150\n```\n:::\n\n```{.r .cell-code}\nncol(iris)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 5\n```\n:::\n\n```{.r .cell-code}\nnames(iris)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"Sepal.Length\" \"Sepal.Width\"  \"Petal.Length\" \"Petal.Width\"  \"Species\"     \n```\n:::\n:::\n\n\n\n\n\n## View the beginning or end of a dataset\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhead(iris)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n  Sepal.Length Sepal.Width Petal.Length Petal.Width Species\n1          5.1         3.5          1.4         0.2  setosa\n2          4.9         3.0          1.4         0.2  setosa\n3          4.7         3.2          1.3         0.2  setosa\n4          4.6         3.1          1.5         0.2  setosa\n5          5.0         3.6          1.4         0.2  setosa\n6          5.4         3.9          1.7         0.4  setosa\n```\n:::\n\n```{.r .cell-code}\ntail(iris)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n    Sepal.Length Sepal.Width Petal.Length Petal.Width   Species\n145          6.7         3.3          5.7         2.5 virginica\n146          6.7         3.0          5.2         2.3 virginica\n147          6.3         2.5          5.0         1.9 virginica\n148          6.5         3.0          5.2         2.0 virginica\n149          6.2         3.4          5.4         2.3 virginica\n150          5.9         3.0          5.1         1.8 virginica\n```\n:::\n:::\n\n\n\n\n## Specify how many rows to view at beginning or end of a dataset\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhead(iris, 3)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n  Sepal.Length Sepal.Width Petal.Length Petal.Width Species\n1          5.1         3.5          1.4         0.2  setosa\n2          4.9         3.0          1.4         0.2  setosa\n3          4.7         3.2          1.3         0.2  setosa\n```\n:::\n\n```{.r .cell-code}\ntail(iris, 2)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n    Sepal.Length Sepal.Width Petal.Length Petal.Width   Species\n149          6.2         3.4          5.4         2.3 virginica\n150          5.9         3.0          5.1         1.8 virginica\n```\n:::\n:::\n\n\n\n\n## The `$`\n\n- Suppose we want to single out the column of petal width values.\n- One way to do this is to use the `$`\n    * `DatSetName$VariableName`\n\n\n::: {.cell}\n\n```{.r .cell-code}\niris$Petal.Width\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n  [1] 0.2 0.2 0.2 0.2 0.2 0.4 0.3 0.2 0.2 0.1 0.2 0.2 0.1 0.1 0.2 0.4 0.4 0.3\n [19] 0.3 0.3 0.2 0.4 0.2 0.5 0.2 0.2 0.4 0.2 0.2 0.2 0.2 0.4 0.1 0.2 0.2 0.2\n [37] 0.2 0.1 0.2 0.2 0.3 0.3 0.2 0.6 0.4 0.3 0.2 0.2 0.2 0.2 1.4 1.5 1.5 1.3\n [55] 1.5 1.3 1.6 1.0 1.3 1.4 1.0 1.5 1.0 1.4 1.3 1.4 1.5 1.0 1.5 1.1 1.8 1.3\n [73] 1.5 1.2 1.3 1.4 1.4 1.7 1.5 1.0 1.1 1.0 1.2 1.6 1.5 1.6 1.5 1.3 1.3 1.3\n [91] 1.2 1.4 1.2 1.0 1.3 1.2 1.3 1.3 1.1 1.3 2.5 1.9 2.1 1.8 2.2 2.1 1.7 1.8\n[109] 1.8 2.5 2.0 1.9 2.1 2.0 2.4 2.3 1.8 2.2 2.3 1.5 2.3 2.0 2.0 1.8 2.1 1.8\n[127] 1.8 1.8 2.1 1.6 1.9 2.0 2.2 1.5 1.4 2.3 2.4 1.8 1.8 2.1 2.4 2.3 1.9 2.3\n[145] 2.5 2.3 1.9 2.0 2.3 1.8\n```\n:::\n:::\n\n\n\n\n## Example using the `$`\n\nThe `$` is helpful if you want to create a new dataset for just that one variable, or, more commonly, if you want to calculate summary statistics for that one variable.\n\n\\\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmean(iris$Petal.Width)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 1.199333\n```\n:::\n\n```{.r .cell-code}\nsd(iris$Petal.Width)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 0.7622377\n```\n:::\n\n```{.r .cell-code}\nmedian(iris$Petal.Width)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 1.3\n```\n:::\n:::\n\n\n\n\n## Inline code\n\n::: {style=\"font-size: 90%;\"}\n* With markdown you can also report __R code output inline__ with the text instead of using a chunk.\n\n::: columns\n::: {.column width=\"50%\"}\nText in editor:\n\n![](../img_slides/screenshot_code_inline_petalwidth.png){fig-align=\"center\"}\n:::\n\n::: {.column width=\"50%\"}\n\nOutput: \n\nThe mean petal width for all 3 species combined is 1.2 \n(SD = 0.8) cm.\n\n:::\n:::\n\n- Reporting summary statistics this way in a report, makes the numbers computationally reproducible.\n- For example, if this were for an abstract and a year later you are wondering where the numbers came from, your R code will tell you exactly which dataset was used to calculate the values.\n:::",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-after-body": [
        "\n<script>\n  // htmlwidgets need to know to resize themselves when slides are shown/hidden.\n  // Fire the \"slideenter\" event (handled by htmlwidgets.js) when the current\n  // slide changes (different for each slide format).\n  (function () {\n    // dispatch for htmlwidgets\n    function fireSlideEnter() {\n      const event = window.document.createEvent(\"Event\");\n      event.initEvent(\"slideenter\", true, true);\n      window.document.dispatchEvent(event);\n    }\n\n    function fireSlideChanged(previousSlide, currentSlide) {\n      fireSlideEnter();\n\n      // dispatch for shiny\n      if (window.jQuery) {\n        if (previousSlide) {\n          window.jQuery(previousSlide).trigger(\"hidden\");\n        }\n        if (currentSlide) {\n          window.jQuery(currentSlide).trigger(\"shown\");\n        }\n      }\n    }\n\n    // hookup for slidy\n    if (window.w3c_slidy) {\n      window.w3c_slidy.add_observer(function (slide_num) {\n        // slide_num starts at position 1\n        fireSlideChanged(null, w3c_slidy.slides[slide_num - 1]);\n      });\n    }\n\n  })();\n</script>\n\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}