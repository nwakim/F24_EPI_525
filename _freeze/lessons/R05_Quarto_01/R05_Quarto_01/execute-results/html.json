{
  "hash": "e66a575e5a1cc801c7d9761f507b520c",
  "result": {
    "markdown": "---\ntitle: \"R3: Quarto in R\"\nauthor: \"Meike Niederhausen and Nicky Wakim\"\ntitle-slide-attributes:\n    data-background-color: \"#3070BF\"\ndate: \"10/9/2024\"\ncategories: [\"Week 1\"]\nformat: \n  revealjs:\n    theme: \"../simple_NW.scss\"\n    chalkboard: true\n    slide-number: true\n    show-slide-number: all\n    width: 1955\n    height: 1100\n    footer: R05 Slides\n    html-math-method: mathjax\n    highlight-style: arrow\nexecute:\n  echo: true\n  freeze: auto\n---\n\n\n# Saving your work with Quarto\n\n![[Artwork by @allison_horst](https://allisonhorst.com/r-packages-functions)](../img_slides/horst_rmarkdown_wizards_quarto.png){fig-align=\"center\"}\n\n## Example: creating an html file\n\n::: columns\n::: {.column width=\"50%\"}\n.qmd file\n![](../img_slides/01_qmd_screenshot.png){fig-align=\"center\"}\n:::\n\n::: {.column width=\"50%\"}\nhtml output  \n![](../img_slides/default_quarto_html.png){fig-align=\"center\"}\n:::\n:::\n\n\n## Quarto = `.qmd` file = Code + text\n\n`knitr` is a package that converts `.qmd` files containing code + markdown syntax to a plain text `.md` markdown file, and then to other formats (html, pdf, Word, etc)\n\n![[Artwork from \"Hello, Quarto\" keynote by Julia Lowndes and Mine Çetinkaya-Rundel, presented at RStudio Conference 2022. Illustrated by Allison Horst.](https://allisonhorst.com/cetinkaya-rundel-lowndes-quarto-keynote)](../img_slides/horst_quarto_schematic2.png){fig-align=\"center\"}\n\n\n\n\n\n\n\n# Basic Quarto example\n\n![[Artwork from \"Hello, Quarto\" keynote by Julia Lowndes and Mine Çetinkaya-Rundel, presented at RStudio Conference 2022. Illustrated by Allison Horst.](https://allisonhorst.com/cetinkaya-rundel-lowndes-quarto-keynote)](../img_slides/horst_quarto_moon_penguins.png){fig-align=\"center\"}\n\n\n##  1. Create a Quarto file (`.qmd`) \n\n**Two options:**\n\n1. click on File $\\rightarrow$ New File $\\rightarrow$ Quarto Document...$\\rightarrow$ OK, \n1. or in upper left corner of RStudio click on ![](../img_slides/green_plus_create_file.png){width=\"70\"}\n$\\rightarrow$ \n![](../img_slides/select_quarto_option.png){width=\"250\"}\n\n\n::: columns\n::: {.column width=\"50%\"}\n**Pop-up window selections:**\n\n* Enter a title and your name\n* Select `HTML` output format (default)\n* Engine: select `Knitr`\n* Editor: Select `Use visual markdown editor`\n* Click `Create`\n:::\n\n::: {.column width=\"50%\"}\n\n![](../img_slides/01_qmd_screenshot_popup.png)\n:::\n:::\n\n##  2. Create a Quarto file (`.qmd`) \n   \n* After clicking on `Create`, you should then see the following in your editor window:\n\n![](../img_slides/01_qmd_screenshot.png){fig-align=\"center\"}\n\n## 3. Save the Quarto file (`.qmd`) \n\n* __Save the file__ by \n    + selecting `File -> Save`, \n    + or clicking on ![](../img_slides/01_Script_Save.png){width=\"33\" height=\"24\"} (towards the left above the scripting window),\n    + or keyboard shortcut\n        * PC:   _Ctrl + s_\n        * Mac:   _Command + s_\n        \n\n* You will need to specify\n    + a __filename__ to save the file as\n        - ALWAYS use __.qmd__ as the filename extension for Quarto files\n    + the __folder__ to save the file in\n\n\n## 4. Create html file \n\nWe create the html file by **rendering** the .qmd file.  \n\nTwo options:\n\n1. click on the Render icon ![](../img_slides/render_icon.png) at the top of the editor window, \n1. or use keyboard shortcuts\n    * Mac: *Command+Shift+K* \n    * PC:  *Ctrl+Shift+K*\n\n* A new window will open with the html output.\n* You will now see both .qmd and .html files in the folder where you saved the .qmd file.\n\n\n:::{.callout-note}\n* The template .qmd file that RStudio creates will render to an html file by default.\n* The output format can be changed to create a Word doc, pdf, slides, etc.\n:::\n\n## .qmd file vs. its html output \n\n::: columns\n::: {.column width=\"50%\"}\n.qmd file\n![](../img_slides/01_qmd_screenshot.png){fig-align=\"center\"}\n:::\n\n::: {.column width=\"50%\"}\nhtml output  \n![](../img_slides/default_quarto_html.png){fig-align=\"center\"}\n\n:::\n:::\n\n# Importing data\n\n# Packages\n\n## Installing packages\n\n## `here` package\n\n::: columns\n::: column\n-   [Good source for the `here` package](http://jenrichmond.rbind.io/post/how-to-use-the-here-package/)\n\n    -   Just substitute `.Rmd` with `.qmd`\n\n-   Basically, a `.qmd` file and `.R` file work differently\n\n    -   We haven't worked much with `.R` files\n\n-   For `.qmd` files, the automatic directory is the folder it is in\n\n    -   But we want it to be the main project folder\n\n-   `here` can help with that\n:::\n\n::: column\n![](images/paths.png){fig-align=\"center\"}\n:::\n:::\n\n## Install `here` package\n\n-   Install `here` package: you can do this in your console (not inside `.qmd` file)\n\n\n::: {.cell}\n\n```{.r .cell-code}\ninstall.packages(\"here\")\n```\n:::\n\n\n-   Within your console, type `here()` and enter\n\n    -   Try this with `getwd()` as well\n\n## Using `here()` to load data\n\n-   The `here()` function will start at the working directory (where your `.Rproj` file is) and let you write out a file path for anything\n\n-   To load the dataset in our `.qmd` file, we will use:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndata = read_excel(here(\"./Data/CH05Q01.xls\"))\ndata = read_excel(here(\"Data\", \"CH05Q01.xls\"))\n```\n:::\n\n\n::: red\n::: red-ttl\nWatch out when using lubridate package simultaneously\n:::\n\n::: red-cont\nUse `here::here()` if you have `lubridate` loaded within same `.qmd`. This will tell R to use the function `here()` within the `here` package instead of `lubridate`'s `here()` function. To call lubridate's function, we'd use `lubridate::here()`\n:::\n:::\n\n\n::: {.cell}\n::: {.cell-output-display}\n```{=html}\n<div class=\"countdown\" id=\"timer_ee5305bc\" data-update-every=\"1\" tabindex=\"0\" style=\"right:0;bottom:0;\">\n<div class=\"countdown-controls\"><button class=\"countdown-bump-down\">&minus;</button><button class=\"countdown-bump-up\">&plus;</button></div>\n<code class=\"countdown-time\"><span class=\"countdown-digits minutes\">05</span><span class=\"countdown-digits colon\">:</span><span class=\"countdown-digits seconds\">00</span></code>\n</div>\n```\n:::\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-in-header": [
        "<link href=\"../../site_libs/countdown-0.4.0/countdown.css\" rel=\"stylesheet\" />\n<script src=\"../../site_libs/countdown-0.4.0/countdown.js\"></script>\n"
      ],
      "include-after-body": [
        "\n<script>\n  // htmlwidgets need to know to resize themselves when slides are shown/hidden.\n  // Fire the \"slideenter\" event (handled by htmlwidgets.js) when the current\n  // slide changes (different for each slide format).\n  (function () {\n    // dispatch for htmlwidgets\n    function fireSlideEnter() {\n      const event = window.document.createEvent(\"Event\");\n      event.initEvent(\"slideenter\", true, true);\n      window.document.dispatchEvent(event);\n    }\n\n    function fireSlideChanged(previousSlide, currentSlide) {\n      fireSlideEnter();\n\n      // dispatch for shiny\n      if (window.jQuery) {\n        if (previousSlide) {\n          window.jQuery(previousSlide).trigger(\"hidden\");\n        }\n        if (currentSlide) {\n          window.jQuery(currentSlide).trigger(\"shown\");\n        }\n      }\n    }\n\n    // hookup for slidy\n    if (window.w3c_slidy) {\n      window.w3c_slidy.add_observer(function (slide_num) {\n        // slide_num starts at position 1\n        fireSlideChanged(null, w3c_slidy.slides[slide_num - 1]);\n      });\n    }\n\n  })();\n</script>\n\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}