{
  "hash": "abcfc79902c5d2ef618bf97d83283a8e",
  "result": {
    "markdown": "---\ntitle: \"Muddy Points for `tidyverse`\"\ndate: \"11/4/2024\"\ndate-modified: \"today\"\nformat: \n  html:\n    link-external-newwindow: true\neditor_options: \n  chunk_output_type: console\n---\n\n\n\n## 1. More on the functions and problems we had in class!\n\n::: callout-important\nThis section has some examples from [this YouTube video series](https://www.youtube.com/watch?v=THGFXV4RW8U&list=PLiC1doDIe9rC8RgWPAWqDETE-VbKOWfWl&ab_channel=DataDaft). There is a video on mutate, pipe, filter, select, rename, arrange, and summarize. Note that some of the function in the series is outdated. The use of `if_else()` in the video is outdated, and it is more common to use `case_when()` now. The use of `gather` and `spread` have been replaced by `pivot_longer` and `pivot_wider`.\n:::\n\nTo discuss these functions below, I want to use a different dataset than what we used for examples in class. I'm hoping this allows us to see each function from a different angle. I'll use the dataset that we used for some of the `ggplot` examples: `mtcars`. Let's load the tidyverse and take a look at the dataset:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\nglimpse(mtcars)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nRows: 32\nColumns: 11\n$ mpg  <dbl> 21.0, 21.0, 22.8, 21.4, 18.7, 18.1, 14.3, 24.4, 22.8, 19.2, 17.8,…\n$ cyl  <dbl> 6, 6, 4, 6, 8, 6, 8, 4, 4, 6, 6, 8, 8, 8, 8, 8, 8, 4, 4, 4, 4, 8,…\n$ disp <dbl> 160.0, 160.0, 108.0, 258.0, 360.0, 225.0, 360.0, 146.7, 140.8, 16…\n$ hp   <dbl> 110, 110, 93, 110, 175, 105, 245, 62, 95, 123, 123, 180, 180, 180…\n$ drat <dbl> 3.90, 3.90, 3.85, 3.08, 3.15, 2.76, 3.21, 3.69, 3.92, 3.92, 3.92,…\n$ wt   <dbl> 2.620, 2.875, 2.320, 3.215, 3.440, 3.460, 3.570, 3.190, 3.150, 3.…\n$ qsec <dbl> 16.46, 17.02, 18.61, 19.44, 17.02, 20.22, 15.84, 20.00, 22.90, 18…\n$ vs   <dbl> 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0,…\n$ am   <dbl> 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0,…\n$ gear <dbl> 4, 4, 4, 3, 3, 3, 3, 4, 4, 4, 4, 3, 3, 3, 3, 3, 3, 4, 4, 4, 3, 3,…\n$ carb <dbl> 4, 4, 1, 1, 2, 1, 4, 2, 2, 4, 4, 3, 3, 3, 4, 4, 4, 1, 2, 1, 1, 2,…\n```\n:::\n:::\n\n\n### `mutate()`\n\nFor mutate, there are a few common uses:\n\n-   create another numeric variable by manipulating other variables\n\n-   create a categorical variable by creating cases from other variables\n\n#### Create another numeric variable by manipulating other variables\n\nThe `wt` variable is the weight of the car in tons. Let's say we want the full weight in pounds (lbs). I'll create a new variable that is 1000 times (1 ton = 1000 lbs) the weight in the dataset.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmtcars1 = mtcars %>%\n  mutate(weight_lb = wt * 1000)\n\nglimpse(mtcars1)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nRows: 32\nColumns: 12\n$ mpg       <dbl> 21.0, 21.0, 22.8, 21.4, 18.7, 18.1, 14.3, 24.4, 22.8, 19.2, …\n$ cyl       <dbl> 6, 6, 4, 6, 8, 6, 8, 4, 4, 6, 6, 8, 8, 8, 8, 8, 8, 4, 4, 4, …\n$ disp      <dbl> 160.0, 160.0, 108.0, 258.0, 360.0, 225.0, 360.0, 146.7, 140.…\n$ hp        <dbl> 110, 110, 93, 110, 175, 105, 245, 62, 95, 123, 123, 180, 180…\n$ drat      <dbl> 3.90, 3.90, 3.85, 3.08, 3.15, 2.76, 3.21, 3.69, 3.92, 3.92, …\n$ wt        <dbl> 2.620, 2.875, 2.320, 3.215, 3.440, 3.460, 3.570, 3.190, 3.15…\n$ qsec      <dbl> 16.46, 17.02, 18.61, 19.44, 17.02, 20.22, 15.84, 20.00, 22.9…\n$ vs        <dbl> 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, …\n$ am        <dbl> 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, …\n$ gear      <dbl> 4, 4, 4, 3, 3, 3, 3, 4, 4, 4, 4, 3, 3, 3, 3, 3, 3, 4, 4, 4, …\n$ carb      <dbl> 4, 4, 1, 1, 2, 1, 4, 2, 2, 4, 4, 3, 3, 3, 4, 4, 4, 1, 2, 1, …\n$ weight_lb <dbl> 2620, 2875, 2320, 3215, 3440, 3460, 3570, 3190, 3150, 3440, …\n```\n:::\n:::\n\n\nWe can also perform several mutations at the same time. Let's say we want the weight in pounds AND the horse power per cylinder (`hp` per `cyl`). We can perform both manipulations:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmtcars2 = mtcars %>%\n  mutate(weight_lb = wt * 1000, \n         hp_per_cyl = hp/cyl)\n\nglimpse(mtcars2)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nRows: 32\nColumns: 13\n$ mpg        <dbl> 21.0, 21.0, 22.8, 21.4, 18.7, 18.1, 14.3, 24.4, 22.8, 19.2,…\n$ cyl        <dbl> 6, 6, 4, 6, 8, 6, 8, 4, 4, 6, 6, 8, 8, 8, 8, 8, 8, 4, 4, 4,…\n$ disp       <dbl> 160.0, 160.0, 108.0, 258.0, 360.0, 225.0, 360.0, 146.7, 140…\n$ hp         <dbl> 110, 110, 93, 110, 175, 105, 245, 62, 95, 123, 123, 180, 18…\n$ drat       <dbl> 3.90, 3.90, 3.85, 3.08, 3.15, 2.76, 3.21, 3.69, 3.92, 3.92,…\n$ wt         <dbl> 2.620, 2.875, 2.320, 3.215, 3.440, 3.460, 3.570, 3.190, 3.1…\n$ qsec       <dbl> 16.46, 17.02, 18.61, 19.44, 17.02, 20.22, 15.84, 20.00, 22.…\n$ vs         <dbl> 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1,…\n$ am         <dbl> 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1,…\n$ gear       <dbl> 4, 4, 4, 3, 3, 3, 3, 4, 4, 4, 4, 3, 3, 3, 3, 3, 3, 4, 4, 4,…\n$ carb       <dbl> 4, 4, 1, 1, 2, 1, 4, 2, 2, 4, 4, 3, 3, 3, 4, 4, 4, 1, 2, 1,…\n$ weight_lb  <dbl> 2620, 2875, 2320, 3215, 3440, 3460, 3570, 3190, 3150, 3440,…\n$ hp_per_cyl <dbl> 18.33333, 18.33333, 23.25000, 18.33333, 21.87500, 17.50000,…\n```\n:::\n:::\n\n\nYou can even use the same syntax if you need to change a variable that depends on a previous mutation. Let's say I want the ratio of weight in pounds to the car's horse power.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmtcars3 = mtcars %>%\n  mutate(weight_lb = wt * 1000, \n         w_to_hp = weight_lb / hp)\n\nglimpse(mtcars3)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nRows: 32\nColumns: 13\n$ mpg       <dbl> 21.0, 21.0, 22.8, 21.4, 18.7, 18.1, 14.3, 24.4, 22.8, 19.2, …\n$ cyl       <dbl> 6, 6, 4, 6, 8, 6, 8, 4, 4, 6, 6, 8, 8, 8, 8, 8, 8, 4, 4, 4, …\n$ disp      <dbl> 160.0, 160.0, 108.0, 258.0, 360.0, 225.0, 360.0, 146.7, 140.…\n$ hp        <dbl> 110, 110, 93, 110, 175, 105, 245, 62, 95, 123, 123, 180, 180…\n$ drat      <dbl> 3.90, 3.90, 3.85, 3.08, 3.15, 2.76, 3.21, 3.69, 3.92, 3.92, …\n$ wt        <dbl> 2.620, 2.875, 2.320, 3.215, 3.440, 3.460, 3.570, 3.190, 3.15…\n$ qsec      <dbl> 16.46, 17.02, 18.61, 19.44, 17.02, 20.22, 15.84, 20.00, 22.9…\n$ vs        <dbl> 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, …\n$ am        <dbl> 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, …\n$ gear      <dbl> 4, 4, 4, 3, 3, 3, 3, 4, 4, 4, 4, 3, 3, 3, 3, 3, 3, 4, 4, 4, …\n$ carb      <dbl> 4, 4, 1, 1, 2, 1, 4, 2, 2, 4, 4, 3, 3, 3, 4, 4, 4, 1, 2, 1, …\n$ weight_lb <dbl> 2620, 2875, 2320, 3215, 3440, 3460, 3570, 3190, 3150, 3440, …\n$ w_to_hp   <dbl> 23.81818, 26.13636, 24.94624, 29.22727, 19.65714, 32.95238, …\n```\n:::\n:::\n\n\n#### Create a categorical variable by creating cases from other variables\n\nRecall in class we used mutate to label the numeric values of `am` to a categorical variable `transmission`. We create a new categorical variable from a binary, numeric variable.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmtcars4 = mtcars %>%\n  mutate(transmission = case_when(am == 0 ~ \"automatic\",\n                                  am == 1 ~ \"manual\"))\nglimpse(mtcars4)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nRows: 32\nColumns: 12\n$ mpg          <dbl> 21.0, 21.0, 22.8, 21.4, 18.7, 18.1, 14.3, 24.4, 22.8, 19.…\n$ cyl          <dbl> 6, 6, 4, 6, 8, 6, 8, 4, 4, 6, 6, 8, 8, 8, 8, 8, 8, 4, 4, …\n$ disp         <dbl> 160.0, 160.0, 108.0, 258.0, 360.0, 225.0, 360.0, 146.7, 1…\n$ hp           <dbl> 110, 110, 93, 110, 175, 105, 245, 62, 95, 123, 123, 180, …\n$ drat         <dbl> 3.90, 3.90, 3.85, 3.08, 3.15, 2.76, 3.21, 3.69, 3.92, 3.9…\n$ wt           <dbl> 2.620, 2.875, 2.320, 3.215, 3.440, 3.460, 3.570, 3.190, 3…\n$ qsec         <dbl> 16.46, 17.02, 18.61, 19.44, 17.02, 20.22, 15.84, 20.00, 2…\n$ vs           <dbl> 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, …\n$ am           <dbl> 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, …\n$ gear         <dbl> 4, 4, 4, 3, 3, 3, 3, 4, 4, 4, 4, 3, 3, 3, 3, 3, 3, 4, 4, …\n$ carb         <dbl> 4, 4, 1, 1, 2, 1, 4, 2, 2, 4, 4, 3, 3, 3, 4, 4, 4, 1, 2, …\n$ transmission <chr> \"manual\", \"manual\", \"manual\", \"automatic\", \"automatic\", \"…\n```\n:::\n:::\n\n\nWe can also create a categorical variable from a continuous numeric variable. Let's say we want to divide the miles per gallon into three categories: low, medium, and high. We can use `mutate()` and `case_when()` to do so:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmtcars5 = mtcars %>%\n  mutate(mpg_cat = case_when(mpg > 22 ~ \"high\",\n                             mpg > 15 ~ \"medium\", \n                             .default = \"low\"))\nglimpse(mtcars5)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nRows: 32\nColumns: 12\n$ mpg     <dbl> 21.0, 21.0, 22.8, 21.4, 18.7, 18.1, 14.3, 24.4, 22.8, 19.2, 17…\n$ cyl     <dbl> 6, 6, 4, 6, 8, 6, 8, 4, 4, 6, 6, 8, 8, 8, 8, 8, 8, 4, 4, 4, 4,…\n$ disp    <dbl> 160.0, 160.0, 108.0, 258.0, 360.0, 225.0, 360.0, 146.7, 140.8,…\n$ hp      <dbl> 110, 110, 93, 110, 175, 105, 245, 62, 95, 123, 123, 180, 180, …\n$ drat    <dbl> 3.90, 3.90, 3.85, 3.08, 3.15, 2.76, 3.21, 3.69, 3.92, 3.92, 3.…\n$ wt      <dbl> 2.620, 2.875, 2.320, 3.215, 3.440, 3.460, 3.570, 3.190, 3.150,…\n$ qsec    <dbl> 16.46, 17.02, 18.61, 19.44, 17.02, 20.22, 15.84, 20.00, 22.90,…\n$ vs      <dbl> 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1,…\n$ am      <dbl> 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0,…\n$ gear    <dbl> 4, 4, 4, 3, 3, 3, 3, 4, 4, 4, 4, 3, 3, 3, 3, 3, 3, 4, 4, 4, 3,…\n$ carb    <dbl> 4, 4, 1, 1, 2, 1, 4, 2, 2, 4, 4, 3, 3, 3, 4, 4, 4, 1, 2, 1, 1,…\n$ mpg_cat <chr> \"medium\", \"medium\", \"high\", \"medium\", \"medium\", \"medium\", \"low…\n```\n:::\n:::\n\n\nNotice that I used `.default` in the last case. This means \"for all other values of mpg, assign it to 'low'.\"\n\n### pipe `%>%`\n\n[Check out the videos explanation!](https://www.youtube.com/watch?v=ui3VZeuN8QY&list=PLiC1doDIe9rC8RgWPAWqDETE-VbKOWfWl&index=2&ab_channel=DataDaft) I can't explain it much better!!\n\n### `select()` everything but a certain variable\n\nIt seems like we're mostly okay with the `select()` function, but want more information on selecting everything but a certain varaible.\n\nWhen we select variables, we have the option to identify variables we want to keep or remove. If we want to keep a variable, we would just list the variable's column name. If we want to remove a variable, we use the minus sign to let R know that we do NOT want that variable. We typically do not tell R to remove and keep variables within the same `select()` function. Let's recall the variables within the original `mtcars` dataset:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nglimpse(mtcars)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nRows: 32\nColumns: 11\n$ mpg  <dbl> 21.0, 21.0, 22.8, 21.4, 18.7, 18.1, 14.3, 24.4, 22.8, 19.2, 17.8,…\n$ cyl  <dbl> 6, 6, 4, 6, 8, 6, 8, 4, 4, 6, 6, 8, 8, 8, 8, 8, 8, 4, 4, 4, 4, 8,…\n$ disp <dbl> 160.0, 160.0, 108.0, 258.0, 360.0, 225.0, 360.0, 146.7, 140.8, 16…\n$ hp   <dbl> 110, 110, 93, 110, 175, 105, 245, 62, 95, 123, 123, 180, 180, 180…\n$ drat <dbl> 3.90, 3.90, 3.85, 3.08, 3.15, 2.76, 3.21, 3.69, 3.92, 3.92, 3.92,…\n$ wt   <dbl> 2.620, 2.875, 2.320, 3.215, 3.440, 3.460, 3.570, 3.190, 3.150, 3.…\n$ qsec <dbl> 16.46, 17.02, 18.61, 19.44, 17.02, 20.22, 15.84, 20.00, 22.90, 18…\n$ vs   <dbl> 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0,…\n$ am   <dbl> 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0,…\n$ gear <dbl> 4, 4, 4, 3, 3, 3, 3, 4, 4, 4, 4, 3, 3, 3, 3, 3, 3, 4, 4, 4, 3, 3,…\n$ carb <dbl> 4, 4, 1, 1, 2, 1, 4, 2, 2, 4, 4, 3, 3, 3, 4, 4, 4, 1, 2, 1, 1, 2,…\n```\n:::\n:::\n\n\nNow we want to keep the following variables: `cyl`, `mpg`, `disp`, and `qsec`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmtcars6 = mtcars %>%\n  select(mpg, cyl, disp, qsec)\nglimpse(mtcars6)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nRows: 32\nColumns: 4\n$ mpg  <dbl> 21.0, 21.0, 22.8, 21.4, 18.7, 18.1, 14.3, 24.4, 22.8, 19.2, 17.8,…\n$ cyl  <dbl> 6, 6, 4, 6, 8, 6, 8, 4, 4, 6, 6, 8, 8, 8, 8, 8, 8, 4, 4, 4, 4, 8,…\n$ disp <dbl> 160.0, 160.0, 108.0, 258.0, 360.0, 225.0, 360.0, 146.7, 140.8, 16…\n$ qsec <dbl> 16.46, 17.02, 18.61, 19.44, 17.02, 20.22, 15.84, 20.00, 22.90, 18…\n```\n:::\n:::\n\n\nIn this case there was less typing to ID the variables we wanted to keep, so we inputted the column names. If we wanted to ID the variables we wanted to remove, what variables would identify to get the same remaining variables that are in `mtcars6`?\n\nSo we want to remove the following variables:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmtcars7 = mtcars %>%\n  select(-hp, -drat, -wt, -vs, -am, -gear, -carb)\nglimpse(mtcars7)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nRows: 32\nColumns: 4\n$ mpg  <dbl> 21.0, 21.0, 22.8, 21.4, 18.7, 18.1, 14.3, 24.4, 22.8, 19.2, 17.8,…\n$ cyl  <dbl> 6, 6, 4, 6, 8, 6, 8, 4, 4, 6, 6, 8, 8, 8, 8, 8, 8, 4, 4, 4, 4, 8,…\n$ disp <dbl> 160.0, 160.0, 108.0, 258.0, 360.0, 225.0, 360.0, 146.7, 140.8, 16…\n$ qsec <dbl> 16.46, 17.02, 18.61, 19.44, 17.02, 20.22, 15.84, 20.00, 22.90, 18…\n```\n:::\n:::\n\n\nSo both get the job done, but one is definitely quicker to type!\n\n::: callout-note\n### We don't have to write the minus in front of every variable\n\nWhen we are removing several variables, we can combine them into a vector to remove:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmtcars8 = mtcars %>%\n  select(-c(hp, drat, wt, vs, am, gear, carb))\nglimpse(mtcars8)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nRows: 32\nColumns: 4\n$ mpg  <dbl> 21.0, 21.0, 22.8, 21.4, 18.7, 18.1, 14.3, 24.4, 22.8, 19.2, 17.8,…\n$ cyl  <dbl> 6, 6, 4, 6, 8, 6, 8, 4, 4, 6, 6, 8, 8, 8, 8, 8, 8, 4, 4, 4, 4, 8,…\n$ disp <dbl> 160.0, 160.0, 108.0, 258.0, 360.0, 225.0, 360.0, 146.7, 140.8, 16…\n$ qsec <dbl> 16.46, 17.02, 18.61, 19.44, 17.02, 20.22, 15.84, 20.00, 22.90, 18…\n```\n:::\n:::\n\n\nThe vector above is: `c(hp, drat, wt, vs, am, gear, carb)` and the minus sign in front of the vector will be applied to each variable.\n:::\n\n### `pivot_longer()`\n\nI want to address the function with the faculty dataset from class.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Note, I've put the data in a folder \"data\" that is in the same folder as this page's file\nstaff = read_csv(\"data/instructional-staff.csv\")\nstaff\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 5 × 12\n  faculty_type    `1975` `1989` `1993` `1995` `1999` `2001` `2003` `2005` `2007`\n  <chr>            <dbl>  <dbl>  <dbl>  <dbl>  <dbl>  <dbl>  <dbl>  <dbl>  <dbl>\n1 Full-Time Tenu…   29     27.6   25     24.8   21.8   20.3   19.3   17.8   17.2\n2 Full-Time Tenu…   16.1   11.4   10.2    9.6    8.9    9.2    8.8    8.2    8  \n3 Full-Time Non-…   10.3   14.1   13.6   13.6   15.2   15.5   15     14.8   14.9\n4 Part-Time Facu…   24     30.4   33.1   33.2   35.5   36     37     39.3   40.5\n5 Graduate Stude…   20.5   16.5   18.1   18.8   18.7   19     20     19.9   19.5\n# ℹ 2 more variables: `2009` <dbl>, `2011` <dbl>\n```\n:::\n:::\n\n\nNote that I am not using `glimpse()` here because we only have 5 rows corresponding to the faculty type. What would a glimpse of the data look like?\n\n\n::: {.cell}\n\n```{.r .cell-code}\nglimpse(staff)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nRows: 5\nColumns: 12\n$ faculty_type <chr> \"Full-Time Tenured Faculty\", \"Full-Time Tenure-Track Facu…\n$ `1975`       <dbl> 29.0, 16.1, 10.3, 24.0, 20.5\n$ `1989`       <dbl> 27.6, 11.4, 14.1, 30.4, 16.5\n$ `1993`       <dbl> 25.0, 10.2, 13.6, 33.1, 18.1\n$ `1995`       <dbl> 24.8, 9.6, 13.6, 33.2, 18.8\n$ `1999`       <dbl> 21.8, 8.9, 15.2, 35.5, 18.7\n$ `2001`       <dbl> 20.3, 9.2, 15.5, 36.0, 19.0\n$ `2003`       <dbl> 19.3, 8.8, 15.0, 37.0, 20.0\n$ `2005`       <dbl> 17.8, 8.2, 14.8, 39.3, 19.9\n$ `2007`       <dbl> 17.2, 8.0, 14.9, 40.5, 19.5\n$ `2009`       <dbl> 16.8, 7.6, 15.1, 41.1, 19.4\n$ `2011`       <dbl> 16.7, 7.4, 15.4, 41.3, 19.3\n```\n:::\n:::\n\n\nBoth views are indicators that the dataset is in a \"wide\" format where each year has its own column. We want our data to be in a tidy format, which means each column is a variable and each cell has a value. However, the years are actually values for a variable \"year.\" By using `pivot_longer()`, we can tell R to take those columns for years and make them their own column where year is the value. That means for a year like 1975, there are five numbers corresponding to the five faculty types. Those five numbers are the percentage of the specific faculty type in that year. So we want to end with columns: faculty type, year, and percentage.\n\nTo start with an easier implementation of `pivot_longer()`, let's remove the faculty type using `select()`\n\n\n::: {.cell}\n\n```{.r .cell-code}\nstaff2 = staff %>%\n  select(-faculty_type)\nstaff2\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 5 × 11\n  `1975` `1989` `1993` `1995` `1999` `2001` `2003` `2005` `2007` `2009` `2011`\n   <dbl>  <dbl>  <dbl>  <dbl>  <dbl>  <dbl>  <dbl>  <dbl>  <dbl>  <dbl>  <dbl>\n1   29     27.6   25     24.8   21.8   20.3   19.3   17.8   17.2   16.8   16.7\n2   16.1   11.4   10.2    9.6    8.9    9.2    8.8    8.2    8      7.6    7.4\n3   10.3   14.1   13.6   13.6   15.2   15.5   15     14.8   14.9   15.1   15.4\n4   24     30.4   33.1   33.2   35.5   36     37     39.3   40.5   41.1   41.3\n5   20.5   16.5   18.1   18.8   18.7   19     20     19.9   19.5   19.4   19.3\n```\n:::\n:::\n\n\nNow we can pivot the years! We first identify the columns that we want to pivot. To pivot all the columns, we say `cols = everything()`. `pivot_longer()` knows you want the column names to now become values of a variable, but it does not know what to call that variable. So now we identify the new variable name of the column that will contain all the years (our old column names). We identify the new variable name with: `names_to`. Finally, we need to adress the old cell values that were under each year in our wide dataset. Those cell values will make up a new column/variable. Remember that each year had 5 values underneath it, so we need to include all 55 cell values. Similar to `names_to`, we need to identify the new column names for all those values. We use `values_to` to identify the column name for the cell values of our old wide formatted data.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nstaff_long = staff2 %>%\n  pivot_longer(\n    cols = everything(),    # columns to pivot\n    names_to = \"year\",       # name of new column for variable names\n    values_to = \"percentage\" # name of new column for values\n  ) %>%\n  mutate(percentage = as.numeric(percentage))\n\nhead(staff_long, 20) # I'm asking R to show me the first 20 rows\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 20 × 2\n   year  percentage\n   <chr>      <dbl>\n 1 1975        29  \n 2 1989        27.6\n 3 1993        25  \n 4 1995        24.8\n 5 1999        21.8\n 6 2001        20.3\n 7 2003        19.3\n 8 2005        17.8\n 9 2007        17.2\n10 2009        16.8\n11 2011        16.7\n12 1975        16.1\n13 1989        11.4\n14 1993        10.2\n15 1995         9.6\n16 1999         8.9\n17 2001         9.2\n18 2003         8.8\n19 2005         8.2\n20 2007         8  \n```\n:::\n:::\n\n\nI included the first 20 rows so we could see that the years repeat. This is because there were 5 percentages for each year. While this is in the desired long format, we now see that we're missing the information on faculty type. Each percentage in each year corresponded to a specific faculty type:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nstaff_long %>% filter(year == 1975)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 5 × 2\n  year  percentage\n  <chr>      <dbl>\n1 1975        29  \n2 1975        16.1\n3 1975        10.3\n4 1975        24  \n5 1975        20.5\n```\n:::\n:::\n\n\nWhich percentage is for which faculty??\n\nWe could use another function called `join()` to try to remedy the situation, but it's much easier to redo the pivot function. We will go back to `staff` which still has the faculty type:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nstaff\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 5 × 12\n  faculty_type    `1975` `1989` `1993` `1995` `1999` `2001` `2003` `2005` `2007`\n  <chr>            <dbl>  <dbl>  <dbl>  <dbl>  <dbl>  <dbl>  <dbl>  <dbl>  <dbl>\n1 Full-Time Tenu…   29     27.6   25     24.8   21.8   20.3   19.3   17.8   17.2\n2 Full-Time Tenu…   16.1   11.4   10.2    9.6    8.9    9.2    8.8    8.2    8  \n3 Full-Time Non-…   10.3   14.1   13.6   13.6   15.2   15.5   15     14.8   14.9\n4 Part-Time Facu…   24     30.4   33.1   33.2   35.5   36     37     39.3   40.5\n5 Graduate Stude…   20.5   16.5   18.1   18.8   18.7   19     20     19.9   19.5\n# ℹ 2 more variables: `2009` <dbl>, `2011` <dbl>\n```\n:::\n:::\n\n\nNow we can implement `pivot_longer()`. We will identify the columns we want to pivot as column 2 through 12 so we exclude the faculty type from the pivoting. BUT the really nice thing is that `pivot_longer()` will remember the percentages that correspond to a specific combination of faculty type and year! Let's try it again:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nstaff_long2 = staff %>%\n  pivot_longer(\n    cols = 2:12,    # columns to pivot\n    names_to = \"year\",       # name of new column for variable names\n    values_to = \"percentage\" # name of new column for values\n  ) %>%\n  mutate(percentage = as.numeric(percentage))\n\nhead(staff_long2, 20) # I'm asking R to show me the first 20 rows\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 20 × 3\n   faculty_type                   year  percentage\n   <chr>                          <chr>      <dbl>\n 1 Full-Time Tenured Faculty      1975        29  \n 2 Full-Time Tenured Faculty      1989        27.6\n 3 Full-Time Tenured Faculty      1993        25  \n 4 Full-Time Tenured Faculty      1995        24.8\n 5 Full-Time Tenured Faculty      1999        21.8\n 6 Full-Time Tenured Faculty      2001        20.3\n 7 Full-Time Tenured Faculty      2003        19.3\n 8 Full-Time Tenured Faculty      2005        17.8\n 9 Full-Time Tenured Faculty      2007        17.2\n10 Full-Time Tenured Faculty      2009        16.8\n11 Full-Time Tenured Faculty      2011        16.7\n12 Full-Time Tenure-Track Faculty 1975        16.1\n13 Full-Time Tenure-Track Faculty 1989        11.4\n14 Full-Time Tenure-Track Faculty 1993        10.2\n15 Full-Time Tenure-Track Faculty 1995         9.6\n16 Full-Time Tenure-Track Faculty 1999         8.9\n17 Full-Time Tenure-Track Faculty 2001         9.2\n18 Full-Time Tenure-Track Faculty 2003         8.8\n19 Full-Time Tenure-Track Faculty 2005         8.2\n20 Full-Time Tenure-Track Faculty 2007         8  \n```\n:::\n:::\n\n\nAnd now I'll just dump a couple other ways to identify the columns we want to pivot:\n\n-   In this one, we name the column years. It's like 2:12, but it's helpful when it's hard to see what number the column is. Also, this is a special case because the columns are numbers, so we need to use ' to wrap around the year. In the `mtcars` dataset, a similar approach would be `cyl:vs` to select all the variables between `cyl` and `vs`. You can also make a vector of variable names if they are not next to each other.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nstaff_long3 = staff %>%\n  pivot_longer(\n    cols = '1975':'2011',    # columns to pivot\n    names_to = \"year\",       # name of new column for variable names\n    values_to = \"percentage\" # name of new column for values\n  ) %>%\n  mutate(percentage = as.numeric(percentage))\n\nhead(staff_long3, 20) # I'm asking R to show me the first 20 rows\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 20 × 3\n   faculty_type                   year  percentage\n   <chr>                          <chr>      <dbl>\n 1 Full-Time Tenured Faculty      1975        29  \n 2 Full-Time Tenured Faculty      1989        27.6\n 3 Full-Time Tenured Faculty      1993        25  \n 4 Full-Time Tenured Faculty      1995        24.8\n 5 Full-Time Tenured Faculty      1999        21.8\n 6 Full-Time Tenured Faculty      2001        20.3\n 7 Full-Time Tenured Faculty      2003        19.3\n 8 Full-Time Tenured Faculty      2005        17.8\n 9 Full-Time Tenured Faculty      2007        17.2\n10 Full-Time Tenured Faculty      2009        16.8\n11 Full-Time Tenured Faculty      2011        16.7\n12 Full-Time Tenure-Track Faculty 1975        16.1\n13 Full-Time Tenure-Track Faculty 1989        11.4\n14 Full-Time Tenure-Track Faculty 1993        10.2\n15 Full-Time Tenure-Track Faculty 1995         9.6\n16 Full-Time Tenure-Track Faculty 1999         8.9\n17 Full-Time Tenure-Track Faculty 2001         9.2\n18 Full-Time Tenure-Track Faculty 2003         8.8\n19 Full-Time Tenure-Track Faculty 2005         8.2\n20 Full-Time Tenure-Track Faculty 2007         8  \n```\n:::\n:::\n\n\n-   This one is the same as our in-class code. We \"remove\" faculty type from our identified columns\n\n\n::: {.cell}\n\n```{.r .cell-code}\nstaff_long4 = staff %>%\n  pivot_longer(\n    cols = -faculty_type,    # columns to pivot\n    names_to = \"year\",       # name of new column for variable names\n    values_to = \"percentage\" # name of new column for values\n  ) %>%\n  mutate(percentage = as.numeric(percentage))\n\nhead(staff_long4, 20) # I'm asking R to show me the first 20 rows\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 20 × 3\n   faculty_type                   year  percentage\n   <chr>                          <chr>      <dbl>\n 1 Full-Time Tenured Faculty      1975        29  \n 2 Full-Time Tenured Faculty      1989        27.6\n 3 Full-Time Tenured Faculty      1993        25  \n 4 Full-Time Tenured Faculty      1995        24.8\n 5 Full-Time Tenured Faculty      1999        21.8\n 6 Full-Time Tenured Faculty      2001        20.3\n 7 Full-Time Tenured Faculty      2003        19.3\n 8 Full-Time Tenured Faculty      2005        17.8\n 9 Full-Time Tenured Faculty      2007        17.2\n10 Full-Time Tenured Faculty      2009        16.8\n11 Full-Time Tenured Faculty      2011        16.7\n12 Full-Time Tenure-Track Faculty 1975        16.1\n13 Full-Time Tenure-Track Faculty 1989        11.4\n14 Full-Time Tenure-Track Faculty 1993        10.2\n15 Full-Time Tenure-Track Faculty 1995         9.6\n16 Full-Time Tenure-Track Faculty 1999         8.9\n17 Full-Time Tenure-Track Faculty 2001         9.2\n18 Full-Time Tenure-Track Faculty 2003         8.8\n19 Full-Time Tenure-Track Faculty 2005         8.2\n20 Full-Time Tenure-Track Faculty 2007         8  \n```\n:::\n:::\n\n\n### `across()`\n\nI really ran out of time before getting to this one. For now, you can look at the [examples from this site](https://dplyr.tidyverse.org/reference/across.html#ref-examples) to see the capabilities of `across()` . I invite you to try them out on the various datasets in our lecture.",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}