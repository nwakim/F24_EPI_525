{
  "hash": "e538203fc7b7c7f0bcffe61d02d91386",
  "result": {
    "markdown": "---\ntitle: \"R08: Transforming and subetting data with `tidyverse`\"\nauthor: \"Nicky Wakim\"\ntitle-slide-attributes:\n    data-background-color: \"#3070BF\"\ndate: \"11/11/2024\"\nformat: \n  revealjs:\n    theme: \"../simple_NW.scss\"\n    chalkboard: true\n    slide-number: true\n    show-slide-number: all\n    width: 1955\n    height: 1100\n    footer: R08 Slides\n    html-math-method: mathjax\n    highlight-style: ayu\nexecute:\n  echo: true\n  freeze: auto\neditor_options: \n  chunk_output_type: console\n---\n\n\n\n\n# Introduction to the `tidyverse`\n\n\n::: {.cell}\n<style type=\"text/css\">\n.reveal code {\n  max-height: 100% !important;\n}\n</style>\n:::\n\n\n## \n\n![](../img_slides/spiderverse.jpeg){fig-align=\"center\"}\n\n## What is the tidyverse?\n\nThe **tidyverse** is a collection of R packages designed for data science. All packages share an underlying design philosophy, grammar, and data structures.\n\n::: columns\n::: {.column width=\"45%\"}\n-   **ggplot2** - data visualisation\n-   **dplyr** - data manipulation\n-   **tidyr** - tidy data\n-   **readr** - read rectangular data\n-   **purrr** - functional programming\n-   **tibble** - modern data frames\n-   **stringr** - string manipulation\n-   **forcats** - factors\n-   and many more ...\n:::\n\n::: {.column width=\"55%\"}\n![](../img_slides/tidyverse.png){fig-align=\"center\" width=\"669\"}\n:::\n:::\n\n## Tidy data[^1]\n\n[^1]: Source: R for Data Science. Grolemund and Wickham.\n\n![](../img_slides/tidy-data-frame.png)\n\n1.  Each variable must have its own column.\n\n2.  Each observation must have its own row.\n\n3.  Each value must have its own cell.\n\n## Pipe operator (`magrittr`)\n\n-   The pipe operator (`%>%`) allows us to step through sequential functions in the same way we follow if-then statements or steps from instructions\n\n \n\n::: lob\nI want to find my keys, then start my car, then drive to work, then park my car.\n:::\n\n \n\n::: columns\n::: {.column width=\"50%\"}\n**Nested**\n\n\n::: {.cell}\n\n```{.r .cell-code}\npark(drive(start_car(find(\"keys\")), \n           to = \"work\"))\n```\n:::\n\n:::\n\n::: {.column width=\"50%\"}\n**Piped**\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfind(\"keys\") %>%\n  start_car() %>%\n  drive(to = \"work\") %>%\n  park()\n```\n:::\n\n:::\n:::\n\n# Helpful functions for transforming and subsetting \n\n## Helpful functions for transforming and subsetting \n\n \n\n**Data transformation**\n\n-   `rename()`\n\n-   `mutate()`\n\n-   `pivot_longer()` and `pivot_wider()`\n\n**Data subsetting**\n\n-   `filter()`\n\n-   `select()`\n\n## New dataset: `dds.discr`\n\n- In the US, individuals with developmental disabilities typically receive services and support from state governments\n\n    - California allocates funds to developmentally disabled residents through the Department of Developmental Services (DDS)\n\n- Dataset `dds.discr`\n\n    - Sample of 1,000 people who received DDS funds (out of a total of ~ 250,000)\n    - Data include age, sex, race/ethnicity, and annual DDS financial support per consumer\n\n## Let's look back at the `dds.discr` dataset \n\n   \n\n-   We will load the data (This is a special case! `dds.discr` is a built-in R dataset)\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndata(\"dds.discr\")\n```\n:::\n\n\n-   Now, let's take a glimpse at the dataset:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nglimpse(dds.discr)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nRows: 1,000\nColumns: 6\n$ id           <int> 10210, 10409, 10486, 10538, 10568, 10690, 10711, 10778, 1…\n$ age.cohort   <fct> 13-17, 22-50, 0-5, 18-21, 13-17, 13-17, 13-17, 13-17, 13-…\n$ age          <int> 17, 37, 3, 19, 13, 15, 13, 17, 14, 13, 13, 14, 15, 17, 20…\n$ gender       <fct> Female, Male, Male, Female, Male, Female, Female, Male, F…\n$ expenditures <int> 2113, 41924, 1454, 6400, 4412, 4566, 3915, 3873, 5021, 28…\n$ ethnicity    <fct> White not Hispanic, White not Hispanic, Hispanic, Hispani…\n```\n:::\n:::\n\n\n## Helpful functions for transforming and subsetting \n\n \n\n**Data transformation**\n\n::: lob\n-   `rename()`\n:::\n\n-   `mutate()`\n\n-   `pivot_longer()` and `pivot_wider()`\n\n**Data subsetting**\n\n-   `filter()`\n\n-   `select()`\n\n## `rename()`: one of the first things I usually do\n\n-   I notice that two variables have values that don't necessarily match the variable name\n\n    -   Female and male are not genders ([NIH page on sex and gender](https://orwh.od.nih.gov/sex-gender))\n\n    -   \"White not Hispanic\" combines race and ethnicity into one category ([APA page on race and ethnicity](https://www.apa.org/topics/race-ethnicity))\n\n \n\n::: lob\nI want to rename gender to sex (not sure if assigned at birth or current sex) and rename ethnicity to R_E (race and ethnicity)\n:::\n\n## `rename()`: one of the first things I usually do\n\n- `rename()` can change the name of a column\n\n- We use: `data %>% rename(new_col_name = old_col_name) `\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndds.discr1 = dds.discr %>% \n  rename(SAB = gender, \n         R_E = ethnicity)\n\nglimpse(dds.discr1)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nRows: 1,000\nColumns: 6\n$ id           <int> 10210, 10409, 10486, 10538, 10568, 10690, 10711, 10778, 1…\n$ age.cohort   <fct> 13-17, 22-50, 0-5, 18-21, 13-17, 13-17, 13-17, 13-17, 13-…\n$ age          <int> 17, 37, 3, 19, 13, 15, 13, 17, 14, 13, 13, 14, 15, 17, 20…\n$ SAB          <fct> Female, Male, Male, Female, Male, Female, Female, Male, F…\n$ expenditures <int> 2113, 41924, 1454, 6400, 4412, 4566, 3915, 3873, 5021, 28…\n$ R_E          <fct> White not Hispanic, White not Hispanic, Hispanic, Hispani…\n```\n:::\n:::\n\n\n## Helpful functions for transforming and subsetting \n\n \n\n**Data transformation**\n\n-   `rename()`\n\n::: lob\n-   `mutate()`\n:::\n\n-   `pivot_longer()` and `pivot_wider()`\n\n**Data subsetting**\n\n-   `filter()`\n\n-   `select()`\n\n\n## `mutate()`: constructing new variables from what you have\n\n-   We can create a new variable from other variables\n\n    - Another way to say it: creates new columns that are functions of existing variables\n\n- We often use it like: \n\n\n::: {.cell}\n\n```{.r .cell-code}\ndata %>% mutate(new_variable = some_transformation_of_another_variable)\n```\n:::\n\n\n##  `mutate()`: create a new variable from two other variables\n\n::: lob\nI want to make a variable that is the ratio of expenditures over age\n:::\n\n \n\n\n::: {.cell}\n\n```{.r .cell-code}\ndds.discr2 = dds.discr1 %>%\n  mutate(exp_to_age = expenditures/age) \n\nglimpse(dds.discr2)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nRows: 1,000\nColumns: 7\n$ id           <int> 10210, 10409, 10486, 10538, 10568, 10690, 10711, 10778, 1…\n$ age.cohort   <fct> 13-17, 22-50, 0-5, 18-21, 13-17, 13-17, 13-17, 13-17, 13-…\n$ age          <int> 17, 37, 3, 19, 13, 15, 13, 17, 14, 13, 13, 14, 15, 17, 20…\n$ SAB          <fct> Female, Male, Male, Female, Male, Female, Female, Male, F…\n$ expenditures <int> 2113, 41924, 1454, 6400, 4412, 4566, 3915, 3873, 5021, 28…\n$ R_E          <fct> White not Hispanic, White not Hispanic, Hispanic, Hispani…\n$ exp_to_age   <dbl> 124.2941, 1133.0811, 484.6667, 336.8421, 339.3846, 304.40…\n```\n:::\n:::\n\n\n## Recoding a numeric variable into categorical\n\n \n\n::: lob\nCan we recreate `age.cohort` using the `age` varible?\n:::\n\n \n\n\n::: {.cell}\n\n```{.r .cell-code}\nsummary(dds.discr2)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n       id        age.cohort       age           SAB       expenditures  \n Min.   :10210   0-5  : 82   Min.   : 0.0   Female:503   Min.   :  222  \n 1st Qu.:31809   6-12 :175   1st Qu.:12.0   Male  :497   1st Qu.: 2899  \n Median :55384   13-17:212   Median :18.0                Median : 7026  \n Mean   :54663   18-21:199   Mean   :22.8                Mean   :18066  \n 3rd Qu.:76135   22-50:226   3rd Qu.:26.0                3rd Qu.:37713  \n Max.   :99898   51+  :106   Max.   :95.0                Max.   :75098  \n                                                                        \n                 R_E        exp_to_age    \n White not Hispanic:401   Min.   : 27.57  \n Hispanic          :376   1st Qu.:273.88  \n Asian             :129   Median :461.75  \n Black             : 59   Mean   :   Inf  \n Multi Race        : 26   3rd Qu.:938.12  \n American Indian   :  4   Max.   :   Inf  \n (Other)           :  5                   \n```\n:::\n:::\n\n\n## Recoding a numeric variable into categorical (2/2)\n\n::: columns\n::: {.column width=\"50%\"}\n- We can integrate other functions into `mutate()`\n- For example, `case_when()` is a helpful function for mapping values to a category\n:::\n\n::: {.column width=\"50%\"}\nTidyverse:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndds.discr3 <- dds.discr2 %>%\n  mutate(\n    age.cohort2 = case_when(\n          age <= 5 ~ \"0-5\",\n          age <= 12 ~ \"6-12\", \n          age <= 17 ~ \"13-17\",\n          age <= 21 ~ \"18-21\",\n          age <= 50 ~ \"22-50\",\n          age >= 51 ~ \"51+\"\n    )\n  )\n```\n:::\n\n\n \n:::\n:::\n\n## Have you noticed that I change the number on `dds.discr`?\n\n- I change the number so that R saves a new dataset\n- And I do not overwrite the previous dataset\n- Can be annoying, but VERY helpful when you have to go back and change code\n- When you run things in real time and troubleshoot, it will be helpful to have different versions of the same dataframe\n\n## Helpful functions for transforming and subsetting \n\n \n\n**Data transformation**\n\n-   `rename()`\n\n-   `mutate()`\n\n-   `pivot_longer()` and `pivot_wider()`\n\n**Data subsetting**\n\n::: lob\n-   `filter()`\n:::\n\n-   `select()`\n\n## `filter()`: keep rows that match a condition\n\n-   What if I want to subset the data frame? (keep certain rows of observations)\n\n::: lob\nI want to look at the data for people who between 50 and 60 years old\n:::\n\n \n\n\n::: {.cell}\n\n```{.r .cell-code}\ndds.discr4 = dds.discr3 %>%\n  filter(age >= 50 & age <= 60)\n\nglimpse(dds.discr4)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nRows: 23\nColumns: 8\n$ id           <int> 15970, 19412, 29506, 31658, 36123, 39287, 39672, 43455, 4…\n$ age.cohort   <fct> 51+, 51+, 51+, 51+, 51+, 51+, 51+, 51+, 51+, 51+, 51+, 51…\n$ age          <int> 51, 60, 56, 60, 59, 59, 54, 57, 52, 57, 55, 52, 59, 54, 5…\n$ SAB          <fct> Female, Female, Female, Female, Male, Female, Female, Mal…\n$ expenditures <int> 54267, 57702, 48215, 46873, 42739, 44734, 52833, 48363, 5…\n$ R_E          <fct> White not Hispanic, White not Hispanic, White not Hispani…\n$ exp_to_age   <dbl> 1064.0588, 961.7000, 860.9821, 781.2167, 724.3898, 758.20…\n$ age.cohort2  <chr> \"51+\", \"51+\", \"51+\", \"51+\", \"51+\", \"51+\", \"51+\", \"51+\", \"…\n```\n:::\n:::\n\n\n## Helpful functions for transforming and subsetting \n\n \n\n**Data transformation**\n\n-   `rename()`\n\n-   `mutate()`\n\n-   `pivot_longer()` and `pivot_wider()`\n\n**Data subsetting**\n\n-   `filter()`\n\n::: lob\n-   `select()`\n:::\n\n## `select()`: keep or drop columns using their names and types\n\n-   What if I want to remove or keep certain variables?\n\n::: lob\nI want to only have age and expenditure in my data frame\n:::\n\n \n\n\n::: {.cell}\n\n```{.r .cell-code}\ndds.discr5 = dds.discr2 %>%\n  select(age, expenditures)\n\nglimpse(dds.discr5)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nRows: 1,000\nColumns: 2\n$ age          <int> 17, 37, 3, 19, 13, 15, 13, 17, 14, 13, 13, 14, 15, 17, 20…\n$ expenditures <int> 2113, 41924, 1454, 6400, 4412, 4566, 3915, 3873, 5021, 28…\n```\n:::\n:::\n\n\n# Resources\n\n## `dplyr` resources\n\n-   [More `dpylr` functions to reference!](https://dplyr.tidyverse.org/reference/index.html)\n\nAdditional details and examples are available in the vignettes:\n\n-   [column-wise operations vignette](https://dplyr.tidyverse.org/articles/colwise.html)\n\n-   [row-wise operations vignette](https://dplyr.tidyverse.org/articles/rowwise.html)\n\n \n\nand the dplyr 1.0.0 release blog posts:\n\n-   [working across columns](https://www.tidyverse.org/blog/2020/04/dplyr-1-0-0-colwise/)\n-   [working within rows](https://www.tidyverse.org/blog/2020/04/dplyr-1-0-0-rowwise/)\n\n## R programming class at OHSU!\n\nYou can check out [Dr. Jessica Minnier's R class page](https://sph-r-programming-2022.netlify.app/) if you want more notes, videos, etc.\n\n## The larger tidy ecosystem\n\nJust to name a few...\n\n-   [janitor](https://garthtarr.github.io/meatR/janitor.html)\n\n-   [kableExtra](https://cran.r-project.org/web/packages/kableExtra/vignettes/awesome_table_in_html.html)\n\n-   [patchwork](https://patchwork.data-imaginist.com/)\n\n-   [gghighlight](https://cran.r-project.org/web/packages/gghighlight/vignettes/gghighlight.html)\n\n-   [tidybayes](https://mjskay.github.io/tidybayes/)\n\n## Credit to Mine Çetinkaya-Rundel\n\n-   These notes were built from Mine's notes\n\n    -   Most pages and code were left as she made them\n\n    -   I changed a few things to match our class\n\n-   Please see [her Github repository](https://github.com/mine-cetinkaya-rundel/teach-ds-wsc-2021/tree/main) for the original notes\n\n# If time\n\n## Tidy data[^1]\n\n[^1]: Source: R for Data Science. Grolemund and Wickham.\n\n![](../img_slides/tidy-data-frame.png)\n\n1.  Each variable must have its own column.\n\n2.  Each observation must have its own row.\n\n3.  Each value must have its own cell.\n\n## How do we make our data tidy??\n\n- From a contingency table, we need to create the dataframe using the counts\n\n::: columns\n::: {.column width=\"52%\"}\n\n- In Lesson 4, we saw this contingency table:\n\n\n::: {.cell}\n::: {.cell-output-display}\nTable: Table: Contingency table showing hypertension status and age group, in\nthousands.\n\n|Age Group | Hypertension| No Hypertension|\n|:---------|------------:|---------------:|\n|18-39 yrs |         8836|          112206|\n|40-59 yrs |        42109|           88663|\n|60+ yrs   |        39917|           21589|\n:::\n:::\n\n:::\n\n::: {.column width=\"5%\"}\n:::\n\n::: {.column width=\"43%\"}\n\n- And then I magically had it in a new format so I could make this plot:\n\n\n::: {.cell}\n\n:::\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\"}\nggplot(data = hyp_data, \n       aes(x = Age_Group, \n       fill = Hypertension)) + \n  geom_bar(position = \"fill\")  \n```\n\n::: {.cell-output-display}\n![](R08_tidyverse_01_files/figure-revealjs/unnamed-chunk-16-1.png){width=960}\n:::\n:::\n\n:::\n:::\n\n## \n\n![](../img_slides/pivot.gif){fig-align=\"center\"}\n\n\n## `pivot_*()` functions\n\n![](../img_slides/tidyr-longer-wider.gif){fig-align=\"center\"}\n\n## I used `pivot_longer()` to create tidy data (1/2)\n\n- Note that you won't be required to use `pivot_longer()`\n\n  - I will give you data in a tidy form\n  \n- Here's the original data frame: \n\n\n::: {.cell}\n\n```{.r .cell-code}\nhyp_cont <- data.frame(\n  Age_Group = c(\"18-39 years\", \"40-59 years\", \"60+ years\"),\n  Hypertension = c(8836, 42109, 39917),\n  No_Hypertension = c(112206, 88663, 21589) )\n```\n:::\n\n\n- Note that I use use `data.frame()` to make a data frame\n- Then I can name each column that we saw in the contingency table\n- Note that information about hypertension vs no hypertension is split between columns\n  - And that we only have 3 rows of data to show all 313320 observations\n\n## I used `pivot_longer()` to create tidy data (2/2)\nWe need to tell `pivot_longer()`:\n\n- Which column must be repeated (pivoted) (all other columns are not repeating)\n- The name of the new column that will contain the old variable names \n- Where the values in each cell under the old variables will go\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhyp_data1 = pivot_longer(\n              data = hyp_cont, \n              cols = -Age_Group,         # columns to pivot\n              names_to = \"Hypertension\", # name of new column for variable names\n              values_to = \"Counts\")     # name of new column for values\nhyp_data1\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 6 × 3\n  Age_Group   Hypertension    Counts\n  <chr>       <chr>            <dbl>\n1 18-39 years Hypertension      8836\n2 18-39 years No_Hypertension 112206\n3 40-59 years Hypertension     42109\n4 40-59 years No_Hypertension  88663\n5 60+ years   Hypertension     39917\n6 60+ years   No_Hypertension  21589\n```\n:::\n:::\n\n\n## One more step to make it tidy\n\n- Aka we need one more step to make it so every row is an observation\n  - In this case, we want each row to represent data from one person\n  \n\n::: {.cell}\n\n```{.r .cell-code}\nhyp_data = hyp_data1 %>% uncount(Counts)\nhead(hyp_data, 10)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 10 × 2\n   Age_Group   Hypertension\n   <chr>       <chr>       \n 1 18-39 years Hypertension\n 2 18-39 years Hypertension\n 3 18-39 years Hypertension\n 4 18-39 years Hypertension\n 5 18-39 years Hypertension\n 6 18-39 years Hypertension\n 7 18-39 years Hypertension\n 8 18-39 years Hypertension\n 9 18-39 years Hypertension\n10 18-39 years Hypertension\n```\n:::\n:::\n",
    "supporting": [
      "R08_tidyverse_01_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-after-body": [
        "\n<script>\n  // htmlwidgets need to know to resize themselves when slides are shown/hidden.\n  // Fire the \"slideenter\" event (handled by htmlwidgets.js) when the current\n  // slide changes (different for each slide format).\n  (function () {\n    // dispatch for htmlwidgets\n    function fireSlideEnter() {\n      const event = window.document.createEvent(\"Event\");\n      event.initEvent(\"slideenter\", true, true);\n      window.document.dispatchEvent(event);\n    }\n\n    function fireSlideChanged(previousSlide, currentSlide) {\n      fireSlideEnter();\n\n      // dispatch for shiny\n      if (window.jQuery) {\n        if (previousSlide) {\n          window.jQuery(previousSlide).trigger(\"hidden\");\n        }\n        if (currentSlide) {\n          window.jQuery(currentSlide).trigger(\"shown\");\n        }\n      }\n    }\n\n    // hookup for slidy\n    if (window.w3c_slidy) {\n      window.w3c_slidy.add_observer(function (slide_num) {\n        // slide_num starts at position 1\n        fireSlideChanged(null, w3c_slidy.slides[slide_num - 1]);\n      });\n    }\n\n  })();\n</script>\n\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}