{
  "hash": "6afd96a1d258df98382da65467db503c",
  "result": {
    "markdown": "---\ntitle: \"R02: R Basics\"\nauthor: \"Meike Niederhausen and Nicky Wakim\"\ntitle-slide-attributes:\n    data-background-color: \"#3070BF\"\ndate: \"10/7/2024\"\nformat: \n  revealjs:\n    theme: \"../simple_NW.scss\"\n    chalkboard: true\n    slide-number: true\n    show-slide-number: all\n    width: 1955\n    height: 1100\n    footer: R02 Slides\n    html-math-method: mathjax\n    highlight-style: arrow\nexecute:\n  echo: true\n  freeze: auto\n---\n\n\n\n\n## We will open RStudio on our computer (not R!)\n\n![[Modern Dive](https://moderndive.com/1-getting-started.html#using-r-via-rstudio)](../img_slides/01_md_r.png){fig-align=\"center\"}\n\n\n::: {.cell}\n<style type=\"text/css\">\n.reveal code {\n  max-height: 100% !important;\n}\n</style>\n:::\n\n\n## RStudio anatomy\n\n![[Emma Rand](https://buzzrbeeline.blog/2018/07/04/rstudio-anatomy/)](../img_slides/RStudio_Anatomy.svg){fig-align=\"center\"}\n\n## Let's code! R Basics\n\n![[Artwork by \\@allison_horst](https://allisonhorst.com/everything-else)](../img_slides/horst_timeline_Rlearning.png){fig-align=\"center\"}\n\n## Coding in the console\n\n::: columns\n::: {.column width=\"50%\"}\nWhen you first open R, the console should be empty.\n\n![](../img_slides/01_console_empty.png){fig-align=\"center\"}\n:::\n\n::: {.column width=\"50%\"}\n**Typing and executing code in the console**\n\n-   Type code in the console (blue text)\n-   Press **return** to execute the code\n-   Output shown below in black\n\n![](../img_slides/01_console_commands2.png){fig-align=\"center\"}\n:::\n:::\n\n## We have an option of where to write our code\n\n- We can use the console directly\n  - BUT our work won't be saved\n  \n \n\n- We can also open up a file called a `.R` file\n  - Hit the new document looking button, then click `R script`\n  - Now we can type in the R script\n  - In the R script, we need to press **cmd + return** or **ctrl + return** to execute the code\n  - Output will show up in the Console!\n  \n \n\n- Example by Nicky here!\n\n## Math calculations using R\n\n-   We can use R as a calculator!!\n-   Rules for order of operations are followed\n-   Spaces between numbers and characters are ignored\n\n \n\n::: columns\n::: {.column width=\"50%\"}\n\n::: {.cell}\n\n```{.r .cell-code}\n10^2\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 100\n```\n:::\n\n```{.r .cell-code}\n3 ^ 7\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 2187\n```\n:::\n\n```{.r .cell-code}\n6/9\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 0.6666667\n```\n:::\n\n```{.r .cell-code}\n9-43\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] -34\n```\n:::\n:::\n\n:::\n\n::: {.column width=\"50%\"}\n\n::: {.cell}\n\n```{.r .cell-code}\n4^3-2* 7+9 /2\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 54.5\n```\n:::\n:::\n\n\nThe equation above is computed as $$4^3 − (2 \\cdot 7) + \\frac{9}{2}$$\n:::\n:::\n\n## Variables (saved R objects)\n\nVariables are used to store data, figures, model output, etc.\n\n::: columns\n::: {.column width=\"49%\"}\n-   Can assign a variable using either `=` or `<-`\n    -   **Using `<-` is preferable** for certain occasions\n    -   I usually just use `=` because less typing hehe\n\nAssign just one value:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nx = 5\nx\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 5\n```\n:::\n\n```{.r .cell-code}\nx <- 5\nx\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 5\n```\n:::\n:::\n\n:::\n\n::: {.column width=\"2%\"}\n:::\n\n::: {.column width=\"49%\"}\nAssign a **vector** of values\n\n-   Consecutive integers using `:`\n\n\n::: {.cell}\n\n```{.r .cell-code}\na <- 3:10\na\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1]  3  4  5  6  7  8  9 10\n```\n:::\n:::\n\n\n-   **Concatenate** a string of numbers\n\n\n::: {.cell}\n\n```{.r .cell-code}\nb <- c(5, 12, 2, 100, 8)\nb\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1]   5  12   2 100   8\n```\n:::\n:::\n\n:::\n:::\n\n## Let's try it out!\n\n-   Create a new variable `y` that is assigned the value of 8\n-   Create a new variable `c` that is assigned the vector of values 15 through 20\n-   Create a new variable `d` that is assigned the vector of values 16 through 19 and 22.\n\n \n\n-   Did you notice anything in the `Environment` section of Rstudio?\n\n## Doing math with variables\n\n::: columns\n::: {.column width=\"50%\"}\nMath using variables with just one value\n\n\n::: {.cell}\n\n```{.r .cell-code}\nx <- 5\nx\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 5\n```\n:::\n\n```{.r .cell-code}\nx + 3\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 8\n```\n:::\n\n```{.r .cell-code}\ny <- x^2\ny\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 25\n```\n:::\n:::\n\n:::\n\n::: {.column width=\"50%\"}\nMath on vectors of values:\\\n**element-wise** computation\n\n\n::: {.cell}\n\n```{.r .cell-code}\na <- 3:6\na\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 3 4 5 6\n```\n:::\n\n```{.r .cell-code}\na+2; a*3\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 5 6 7 8\n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\n[1]  9 12 15 18\n```\n:::\n\n```{.r .cell-code}\na*a\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1]  9 16 25 36\n```\n:::\n:::\n\n:::\n:::\n\n## Let's try it out!\n\n-   Use the variable name `y` to find the addition of `y` and 5\n-   Add 5 to the vector `c`\n\n## Variables can include text (characters)\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhi <- \"hello\"\nhi\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"hello\"\n```\n:::\n\n```{.r .cell-code}\ngreetings <- c(\"Guten Tag\", \"Hola\", hi)\ngreetings\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"Guten Tag\" \"Hola\"      \"hello\"    \n```\n:::\n:::\n\n\n## Using functions\n\n-   `mean()` is an example of a function\n-   functions have \"arguments\" that can be specified within the `()`\n-   `?mean` in console will show help file for `mean()`\n\n::: columns\n::: {.column width=\"50%\"}\nFunction <font color=\"#BF396F\">arguments specified</font> by name:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmean(x = 1:4)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 2.5\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nseq(from = 1, to = 12, by = 3)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1]  1  4  7 10\n```\n:::\n\n```{.r .cell-code}\nseq(by = 3, to = 12, from = 1)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1]  1  4  7 10\n```\n:::\n:::\n\n:::\n\n::: {.column width=\"50%\"}\nFunction <font color=\"#BF396F\">arguments not specified</font>, but listed in order:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmean(1:4)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 2.5\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nseq(1, 12, 3)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1]  1  4  7 10\n```\n:::\n:::\n\n:::\n:::\n\n## Now let's use some functions for summary statistics\n\n-   We will calculate the mean for `c`\n-   Let's also calculate the standard deviation for `c`\n    -   Recall, our function is `sd()`\n    -   Use `?sd` in the console to identify the arguments for `c`\n\n \n\n-   If you have more time, you can try to calculate the median and IQR for `c`\n\n# Getting help with R\n\n## There are many ways to get help when you are stuck\n\n- Use the `?` in front of the function name to get more information!\n  - Usually if I need help with the arguments for a function\n  \n \n\n- Google or go to stackoverflow.com\n  - Often when I Google, I get redirected to something like stackoverflow\n  - For example, let's say my `mean` function was outputting `NA`. I would Google something like \"keep getting NA for mean in R\" Then end up [here](https://stackoverflow.com/questions/25297705/mean-na-rm-true-still-returns-na)\n\n \n\n- I can also go to my favoriate AI tool to get help\n  - This is most useful for getting code started if it's complicated (we're not really at that level yet)\n  - I asked ChatGPT \"can you give me the code for calculating the mean in R\"\n    - [This is what I got](https://chatgpt.com/share/66f8a2b9-9918-8006-88af-0dc7b64bb86a)\n  - For code generation, it gives you WAY too much\n  - I also asked ChatGPT \"Why is the mean function in R giving me an NA?\" (in above link)\n    \n## More on AI usage\n\n- [In the syllabus](https://nwakim.github.io/F24_EPI_525/syllabus.html#plagiarism-and-attribution)\n- If you cannot trace code back to the class notes, then do NOT use it!\n  - There's different coding practices and functions out there\n  - I'm giving you a specific set of tools that will serve as a good introduction\n  - You should be able to explain all your code and work \n  \n  \n  ",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-after-body": [
        "\n<script>\n  // htmlwidgets need to know to resize themselves when slides are shown/hidden.\n  // Fire the \"slideenter\" event (handled by htmlwidgets.js) when the current\n  // slide changes (different for each slide format).\n  (function () {\n    // dispatch for htmlwidgets\n    function fireSlideEnter() {\n      const event = window.document.createEvent(\"Event\");\n      event.initEvent(\"slideenter\", true, true);\n      window.document.dispatchEvent(event);\n    }\n\n    function fireSlideChanged(previousSlide, currentSlide) {\n      fireSlideEnter();\n\n      // dispatch for shiny\n      if (window.jQuery) {\n        if (previousSlide) {\n          window.jQuery(previousSlide).trigger(\"hidden\");\n        }\n        if (currentSlide) {\n          window.jQuery(currentSlide).trigger(\"shown\");\n        }\n      }\n    }\n\n    // hookup for slidy\n    if (window.w3c_slidy) {\n      window.w3c_slidy.add_observer(function (slide_num) {\n        // slide_num starts at position 1\n        fireSlideChanged(null, w3c_slidy.slides[slide_num - 1]);\n      });\n    }\n\n  })();\n</script>\n\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}