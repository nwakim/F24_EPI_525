{
  "hash": "d93d6cca8a6d1120f8058ea4c30e9585",
  "result": {
    "markdown": "---\ntitle: \"R06: `ggplot2`, Part 1\"\nauthor: \"Nicky Wakim\"\ntitle-slide-attributes:\n    data-background-color: \"#3070BF\"\ndate: \"10/21/2024\"\nformat: \n  revealjs:\n    theme: \"../simple_NW.scss\"\n    chalkboard: true\n    slide-number: true\n    show-slide-number: all\n    width: 1955\n    height: 1100\n    footer: R06 Slides\n    html-math-method: mathjax\n    highlight-style: arrow\nexecute:\n  echo: true\n  freeze: auto\neditor_options: \n  chunk_output_type: console\n---\n\n\n\n\n## From last time: R Packages\n\nA good analogy for R packages is that they are like apps you can download onto a mobile phone:\n\n![[ModernDive Figure 1.4](https://moderndive.netlify.com/1-getting-started.html#packages)](../img_slides/R_vs_R_packages.png){fig-align=\"center\"}\n\n## From last time: Install the packages listed below\n\n::::: columns\n::: column\n-   `knitr`\n    -   this might actually already be installed\n    -   check your packages list\n-   `tidyverse`\n    -   this is actually a bundle of packages\n    -   *Warning: it will take a while to install!!!*\n    -   see more info at <https://tidyverse.tidyverse.org/>\n-   `rstatix`\n    -   for summary statistics of a dataset\n-   `janitor`\n    -   for cleaning and exploring data\n:::\n\n::: column\n-   `ggridges`\n    -   for creating ridgeline plots\n-   `devtools`\n    -   used to create R packages\n    -   for our purposes, needed to install some packages\n-   `oi_biostat_data`\n    -   this package is on github\n    -   **see the next slide for directions on how to install `oi_biostat_data`**\n-   `here`\n    -   More info in slides ahead\n:::\n:::::\n\n## From last time: Load packages with `library()` command\n\n-   Tip: **at the top of your Qmd file,** create a chunk that loads all of the R packages you want to use in that file.\n\n-   Use the `library()` command to load each required package.\n\n    -   Packages need to be reloaded *every* time you open Rstudio.\n    -   `library()` commands to load needed packages *must* be in the Qmd file\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# run these every time you open Rstudio\nlibrary(tidyverse) # contains ggplot2    \nlibrary(oibiostat)\nlibrary(ggridges)\nlibrary(janitor)\nlibrary(rstatix)\nlibrary(knitr)\nlibrary(gtsummary) # NEW!!\n```\n:::\n\n\n-   You can check whether a package has been loaded or not\n    -   by looking at the Packages tab and\n    -   seeing whether it has been checked off or not\n\n## Introduction to `ggplot2`\n\n::::: columns\n::: {.column width=\"46%\"}\n![[Artwork by \\@allison_horst](https://allisonhorst.com/)](../img_slides/horst_ggplot2_exploratory.png){fig-align=\"center\"}\n:::\n\n::: {.column width=\"54%\"}\n![[Artwork by \\@allison_horst](https://allisonhorst.com/)](../img_slides/ggplot2_masterpiece.png){fig-align=\"center\"}\n:::\n:::::\n\n## `ggplot2` in tidyverse\n\n::::: columns\n::: {.column width=\"40%\"}\n![](../img_slides/ggplot2-part-of-tidyverse.png)\n:::\n\n::: {.column width=\"60%\"}\n-   `ggplot2` is tidyverse's data visualization package\n\n    -   This is one of the main ways to create plots and explore data\n\n \n\n-   The `gg` in \"ggplot2\" stands for Grammar of Graphics\n\n \n\n-   It is inspired by the book **Grammar of Graphics** by Leland Wilkinson\n\n    -   Make graphs/plots by combining independent components\n    -   Start with a basic plot then add layers\n:::\n:::::\n\n\n::: {.cell}\n<style type=\"text/css\">\n.reveal code {\n  max-height: 100% !important;\n}\n</style>\n:::\n\n\n## Works best with \"tidy\" data[^1]\n\n[^1]: Source: R for Data Science. Grolemund and Wickham.\n\n![](../img_slides/tidy-data-frame.png){fig-align=\"center\"}\n\n1.  Each variable must have its own column.\n\n2.  Each observation must have its own row.\n\n3.  Each value must have its own cell.\n\n## Basics of a ggplot\n\n![](../img_slides/ggplot_basics_from_ppt.png){fig-align=\"center\"}\n\n## Grammar of ggplot2\n\n::::: columns\n::: {.column width=\"60%\"}\n![](/lessons/img_slides/ggplot_layers.png){fig-align=\"center\" width=\"1600\"}\n:::\n\n::: {.column width=\"40%\"}\n-   `ggplot2` needs at least the following three to produce a chart:\n    -   data, a mapping, and a layer\n\n \n\n-   For the most part, there are default settings for the other parts:\n    -   scales, facets, coordinates, and themes\n:::\n:::::\n\n## **Data**\n\n-   ggplot2 uses data to construct a plot\n\n-   Works best with tiday data (when every observation is a row and each variable is a column)\n\n-   First step in plotting:\n\n    -   Pass the data to the `ggplot` function, which stores the data to be used later by other parts of the plotting system\n\n## Data\n\n-   For example, if we intend to make a graphic about the `mpg` dataset, we would start as follows:\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nggplot(data = mpg)\n```\n\n::: {.cell-output-display}\n![](R06_ggplot_01_files/figure-revealjs/unnamed-chunk-4-1.png){fig-align='center' width=576}\n:::\n:::\n\n\n## **Mapping**\n\n-   Mappings use the `aes()` function to **map** variables to the different axes on a plot\n\n    -   `aes()` stands for \"aesthetics\"\n\n## Data + Mapping\n\n-   If we want the `cty` and `hwy` columns to map to the x- and y-coordinates in the plot, we can do that as follows:\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nggplot(mpg, mapping = aes(x = cty, y = hwy))\n```\n\n::: {.cell-output-display}\n![](R06_ggplot_01_files/figure-revealjs/unnamed-chunk-5-1.png){fig-align='center' width=576}\n:::\n:::\n\n\n## **Layers**\n\n-   Every layer consists of three important parts:\n\n    -   The **geometry** that determines *how* data are displayed, such as points, lines, or rectangles\n\n    -   The **statistical transformation** that may compute new variables from the data and affect *what* of the data is displayed.\n\n    -   The **position adjustment** that primarily determines *where* a piece of data is being displayed\n\n-   A layer can be constructed using the `geom_*()` and `stat_*()` functions\n\n    -   These functions often determine one of the three parts of a layer, while the other two can still be specified.\n\n## Data + Mapping + Layers\n\nHere is how we can use two layers to display the `cty` and `hwy` columns of the `mpg` dataset as points and stack a trend line on top:\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nggplot(mpg, aes(cty, hwy)) +\n  # to create a scatterplot\n  geom_point() +\n  # to fit and overlay a line\n  geom_smooth(formula = y ~ x, method = \"lm\")\n```\n\n::: {.cell-output-display}\n![](R06_ggplot_01_files/figure-revealjs/unnamed-chunk-6-1.png){fig-align='center' width=576}\n:::\n:::\n\n\n## We can also make plots with a single variable\n\n-   Data: still `mpg`\n\n-   Mapping: using aesthetic to specify only one variable in the x-axis (`cty`)\n\n-   Layers: using `geom_histogram()` to show a plot of the counts per `cty` (which is city mileage)\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nggplot(mpg, aes(cty)) +\n  # to create a histogram\n  geom_histogram()\n```\n\n::: {.cell-output-display}\n![](R06_ggplot_01_files/figure-revealjs/unnamed-chunk-7-1.png){fig-align='center' width=576}\n:::\n:::\n\n\n## Let's take a second to try this out\n\n-   Make sure you are working in a Quarto document that has all the libraries loaded\n\n-   Use `glimpse()` to look at the variables in `mpg`\n\n-   Choose one of the variables to make a plot for\n\n<!-- -->\n\n-   Go to this site: <https://bookdown.dongzhuoer.com/hadley/ggplot2-book/geom>\n\n    -   Choose one of the \"One variable\" geoms that would work well for the variable you chose (discrete or continuous options)\n\n-   Make a plot for the variable!\n\n\n::: {.cell}\n::: {.cell-output-display}\n```{=html}\n<div class=\"countdown\" id=\"timer_8974bdcd\" data-update-every=\"1\" tabindex=\"0\" style=\"right:0;bottom:0;\">\n<div class=\"countdown-controls\"><button class=\"countdown-bump-down\">&minus;</button><button class=\"countdown-bump-up\">&plus;</button></div>\n<code class=\"countdown-time\"><span class=\"countdown-digits minutes\">05</span><span class=\"countdown-digits colon\">:</span><span class=\"countdown-digits seconds\">00</span></code>\n</div>\n```\n:::\n:::\n\n\n## We can add more to plots!\n\nWe can change labels!\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code  code-line-numbers=\"3-4\"}\nggplot(mpg, aes(cty)) +\n  geom_histogram() +\n  labs(x = \"City mileage (mpg)\", y = \"Frequency\", \n       title = \"Histogram of city mileage\")\n```\n\n::: {.cell-output-display}\n![](R06_ggplot_01_files/figure-revealjs/unnamed-chunk-9-1.png){fig-align='center' width=576}\n:::\n:::\n\n\n## Adding more to plots!\n\nIncrease (or decrease) text size so we can read it / it fits nicely!\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code  code-line-numbers=\"5-7\"}\nggplot(mpg, aes(cty)) +\n  geom_histogram() +\n  labs(x = \"City mileage (mpg)\", y = \"Frequency\", \n       title = \"Histogram of city mileage\") +\n  theme(axis.text = element_text(size = 15), \n        axis.title = element_text(size = 15), \n        title = element_text(size = 15))\n```\n\n::: {.cell-output-display}\n![](R06_ggplot_01_files/figure-revealjs/unnamed-chunk-10-1.png){fig-align='center' width=576}\n:::\n:::\n\n\n## Take a moment\n\n-   To add labels to your plot and change the text size if you want\n-   If you have time, look up help on the `element_text()` function\n    -   See if you can tilt your text or change the color\n    \n\n::: {.cell}\n::: {.cell-output-display}\n```{=html}\n<div class=\"countdown\" id=\"timer_c4f0cc52\" data-update-every=\"1\" tabindex=\"0\" style=\"right:0;bottom:0;\">\n<div class=\"countdown-controls\"><button class=\"countdown-bump-down\">&minus;</button><button class=\"countdown-bump-up\">&plus;</button></div>\n<code class=\"countdown-time\"><span class=\"countdown-digits minutes\">05</span><span class=\"countdown-digits colon\">:</span><span class=\"countdown-digits seconds\">00</span></code>\n</div>\n```\n:::\n:::\n\n\n## Resources on `ggplot`\n\n-   `ggplot2` package website: <https://ggplot2.tidyverse.org/articles/ggplot2.html>\n-   Online textbook for `ggplot2`: <https://ggplot2-book.org/>\n-   Another online resource for data visualization with `ggplot2`: <https://socviz.co/index.html#preface>\n",
    "supporting": [
      "R06_ggplot_01_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-in-header": [
        "<link href=\"../../site_libs/countdown-0.4.0/countdown.css\" rel=\"stylesheet\" />\n<script src=\"../../site_libs/countdown-0.4.0/countdown.js\"></script>\n"
      ],
      "include-after-body": [
        "\n<script>\n  // htmlwidgets need to know to resize themselves when slides are shown/hidden.\n  // Fire the \"slideenter\" event (handled by htmlwidgets.js) when the current\n  // slide changes (different for each slide format).\n  (function () {\n    // dispatch for htmlwidgets\n    function fireSlideEnter() {\n      const event = window.document.createEvent(\"Event\");\n      event.initEvent(\"slideenter\", true, true);\n      window.document.dispatchEvent(event);\n    }\n\n    function fireSlideChanged(previousSlide, currentSlide) {\n      fireSlideEnter();\n\n      // dispatch for shiny\n      if (window.jQuery) {\n        if (previousSlide) {\n          window.jQuery(previousSlide).trigger(\"hidden\");\n        }\n        if (currentSlide) {\n          window.jQuery(currentSlide).trigger(\"shown\");\n        }\n      }\n    }\n\n    // hookup for slidy\n    if (window.w3c_slidy) {\n      window.w3c_slidy.add_observer(function (slide_num) {\n        // slide_num starts at position 1\n        fireSlideChanged(null, w3c_slidy.slides[slide_num - 1]);\n      });\n    }\n\n  })();\n</script>\n\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}