{
  "hash": "d4fef1d37c1564259a4d27a2301704f6",
  "result": {
    "markdown": "---\ntitle: \"R03: R Basics, part 2\"\nauthor: \"Meike Niederhausen and Nicky Wakim\"\ntitle-slide-attributes:\n    data-background-color: \"#3070BF\"\ndate: \"10/7/2024\"\nformat: \n  revealjs:\n    theme: \"../simple_NW.scss\"\n    chalkboard: true\n    slide-number: true\n    show-slide-number: all\n    width: 1955\n    height: 1100\n    footer: R03 Slides\n    html-math-method: mathjax\n    highlight-style: arrow\nexecute:\n  echo: true\n  freeze: auto\n---\n\n\n\n\n## Last time\n\n- Downloaded R and Rstudio\n- If you are still having issues downloading, please come to my office hours!\n- Became familiar with the console and a script file\n- Did some math calculations in R!\n\n \n\n\n### Today, we're going to work on...\n\n- Assigning things in R\n- Using functions to calculate \n- Familiarizing ourselves with common issues\n- Troubleshooting with different tools\n- Go over an example dataset\n\n## Where are we?\n\n![](../img_slides/course_map.png){fig-align=\"center\"}\n\n## We will open RStudio on our computer (not R!)\n\n![[Modern Dive](https://moderndive.com/1-getting-started.html#using-r-via-rstudio)](../img_slides/01_md_r.png){fig-align=\"center\"}\n\n\n::: {.cell}\n<style type=\"text/css\">\n.reveal code {\n  max-height: 100% !important;\n}\n</style>\n:::\n\n\n## RStudio anatomy\n\n![[Emma Rand](https://buzzrbeeline.blog/2018/07/04/rstudio-anatomy/)](../img_slides/RStudio_Anatomy.svg){fig-align=\"center\"}\n\n## Variables (saved R objects)\n\nVariables are used to store data, figures, model output, etc.\n\n::: columns\n::: {.column width=\"49%\"}\n-   Can assign a variable using either `=` or `<-`\n    -   **Using `<-` is preferable** for certain occasions\n    -   I usually just use `=` because less typing hehe\n\nAssign just one value:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nx = 5\nx\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 5\n```\n:::\n\n```{.r .cell-code}\nx <- 5\nx\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 5\n```\n:::\n:::\n\n:::\n\n::: {.column width=\"2%\"}\n:::\n\n::: {.column width=\"49%\"}\nAssign a **vector** of values\n\n-   Consecutive integers using `:`\n\n\n::: {.cell}\n\n```{.r .cell-code}\na <- 3:10\na\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1]  3  4  5  6  7  8  9 10\n```\n:::\n:::\n\n\n-   **Concatenate** a string of numbers\n\n\n::: {.cell}\n\n```{.r .cell-code}\nb <- c(5, 12, 2, 100, 8)\nb\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1]   5  12   2 100   8\n```\n:::\n:::\n\n:::\n:::\n\n## Let's try it out!\n\n-   Create a new variable `y` that is assigned the value of 8\n-   Create a new variable `c` that is assigned the vector of values 15 through 20\n-   Create a new variable `d` that is assigned the vector of values 16 through 19 and 22.\n\n \n\n-   Did you notice anything in the `Environment` section of Rstudio?\n\n\n::: {.cell}\n::: {.cell-output-display}\n```{=html}\n<div class=\"countdown\" id=\"timer_4f16198f\" data-update-every=\"1\" tabindex=\"0\" style=\"right:0;bottom:0;\">\n<div class=\"countdown-controls\"><button class=\"countdown-bump-down\">&minus;</button><button class=\"countdown-bump-up\">&plus;</button></div>\n<code class=\"countdown-time\"><span class=\"countdown-digits minutes\">03</span><span class=\"countdown-digits colon\">:</span><span class=\"countdown-digits seconds\">00</span></code>\n</div>\n```\n:::\n:::\n\n\n## Doing math with variables\n\n::: columns\n::: {.column width=\"50%\"}\nMath using variables with just one value\n\n\n::: {.cell}\n\n```{.r .cell-code}\nx <- 5\nx\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 5\n```\n:::\n\n```{.r .cell-code}\nx + 3\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 8\n```\n:::\n\n```{.r .cell-code}\ny <- x^2\ny\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 25\n```\n:::\n:::\n\n:::\n\n::: {.column width=\"50%\"}\nMath on vectors of values:\\\n**element-wise** computation\n\n\n::: {.cell}\n\n```{.r .cell-code}\na <- 3:6\na\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 3 4 5 6\n```\n:::\n\n```{.r .cell-code}\na+2; a*3\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 5 6 7 8\n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\n[1]  9 12 15 18\n```\n:::\n\n```{.r .cell-code}\na*a\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1]  9 16 25 36\n```\n:::\n:::\n\n:::\n:::\n\n## Let's try it out!\n\n-   Use the variable name `y` to find the addition of `y` and 5\n-   Add 5 to the vector `c`\n\n\n::: {.cell}\n::: {.cell-output-display}\n```{=html}\n<div class=\"countdown\" id=\"timer_b54b84c4\" data-update-every=\"1\" tabindex=\"0\" style=\"right:0;bottom:0;\">\n<div class=\"countdown-controls\"><button class=\"countdown-bump-down\">&minus;</button><button class=\"countdown-bump-up\">&plus;</button></div>\n<code class=\"countdown-time\"><span class=\"countdown-digits minutes\">02</span><span class=\"countdown-digits colon\">:</span><span class=\"countdown-digits seconds\">00</span></code>\n</div>\n```\n:::\n:::\n\n\n## Variables can include text (characters)\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhi <- \"hello\"\nhi\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"hello\"\n```\n:::\n\n```{.r .cell-code}\ngreetings <- c(\"Guten Tag\", \"Hola\", hi)\ngreetings\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"Guten Tag\" \"Hola\"      \"hello\"    \n```\n:::\n:::\n\n\n## Using functions\n\n-   `mean()` is an example of a function\n-   functions have \"arguments\" that can be specified within the `()`\n-   `?mean` in console will show help file for `mean()`\n\n::: columns\n::: {.column width=\"50%\"}\nFunction <font color=\"#BF396F\">arguments specified</font> by name:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmean(x = 1:4)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 2.5\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nseq(from = 1, to = 12, by = 3)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1]  1  4  7 10\n```\n:::\n\n```{.r .cell-code}\nseq(by = 3, to = 12, from = 1)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1]  1  4  7 10\n```\n:::\n:::\n\n:::\n\n::: {.column width=\"50%\"}\nFunction <font color=\"#BF396F\">arguments not specified</font>, but listed in order:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmean(1:4)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 2.5\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nseq(1, 12, 3)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1]  1  4  7 10\n```\n:::\n:::\n\n:::\n:::\n\n## Now let's use some functions for summary statistics\n\n-   We will calculate the mean for `c`\n-   Let's also calculate the standard deviation for `c`\n    -   Recall, our function is `sd()`\n    -   Use `?sd` in the console to identify the arguments for `c`\n\n \n\n-   If you have more time, you can try to calculate the median and IQR for `c`\n\n\n::: {.cell}\n::: {.cell-output-display}\n```{=html}\n<div class=\"countdown\" id=\"timer_df922049\" data-update-every=\"1\" tabindex=\"0\" style=\"right:0;bottom:0;\">\n<div class=\"countdown-controls\"><button class=\"countdown-bump-down\">&minus;</button><button class=\"countdown-bump-up\">&plus;</button></div>\n<code class=\"countdown-time\"><span class=\"countdown-digits minutes\">03</span><span class=\"countdown-digits colon\">:</span><span class=\"countdown-digits seconds\">00</span></code>\n</div>\n```\n:::\n:::\n\n\n## Common console errors (1/2)\n\n**Incomplete commands**\n\n::: columns\n::: {.column width=\"50%\"}\n-   When the console is waiting for a new command, the prompt line begins with `>`\n    -   If the console prompt is `+`, then a previous command is incomplete\n    -   You can finish typing the command in the console window\n:::\n\n::: {.column width=\"50%\"}\nExample:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n> 3 + (2*6\n+ )\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 15\n```\n:::\n:::\n\n:::\n:::\n\n## Common console errors (2/2)\n\n**Object is not found**\n\n-   This happens when text is entered for a non-existent variable (object)\n\nExample:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhello\n```\n\n::: {.cell-output .cell-output-error}\n```\nError in eval(expr, envir, enclos): object 'hello' not found\n```\n:::\n:::\n\n\n-   Can be due to missing quotes\n\n\n::: {.cell}\n\n```{.r .cell-code}\ninstall.packages(dplyr) \n```\n\n::: {.cell-output .cell-output-error}\n```\nError in eval(expr, envir, enclos): object 'dplyr' not found\n```\n:::\n\n```{.r .cell-code}\n# correct code is: install.packages(\"dplyr\")\n```\n:::\n\n\n# Getting help with R\n\n## There are many ways to get help when you are stuck\n\n1. [Use the `?` in front of the function name to get more information!]{style=\"color:#BF396F;\"}\n  \n    -   Usually if I need help with the arguments for a function\n\n2. [Google or go to stackoverflow.com]{style=\"color:#3070BF;\"}\n  \n    - Often when I Google, I get redirected to something like stackoverflow\n    - For example, let's say my `mean` function was outputting `NA`. I would Google something like \"keep getting NA for mean in R\" Then end up [here](https://stackoverflow.com/questions/25297705/mean-na-rm-true-still-returns-na)\n\n3. [I can also go to my favorite AI tool to get help]{style=\"color:#459B99;\"}\n  \n    - This is most useful for getting code started if it's complicated (we're not really at that level yet)\n    - I asked ChatGPT \"can you give me the code for calculating the mean in R\"\n        - [This is what I got](https://chatgpt.com/share/66f8a2b9-9918-8006-88af-0dc7b64bb86a)\n    - For code generation, it gives you WAY too much\n    - I also asked ChatGPT \"Why is the mean function in R giving me an NA?\" (in above link)\n    \n## More on AI usage\n\n- [In the syllabus](https://nwakim.github.io/F24_EPI_525/syllabus.html#plagiarism-and-attribution)\n- If you cannot trace code back to the class notes, then do NOT use it!\n  - There's different coding practices and functions out there\n  - I'm giving you a specific set of tools that will serve as a good introduction\n  - You should be able to explain all your code and work \n\n\n# Let's try with an example dataset\n\n## Fisher's (or Anderson's) Iris data set\n\nData description:\n\n-   n = 150\n-   3 species of Iris flowers (Setosa, Virginica, and Versicolour)\n    -   50 measurements of each type of Iris\n-   **Variables**:\n    -   sepal length, sepal width, petal length, petal width, and species\n\n<center><img src=\"../img_slides/Iris_types.png\" width=\"70%\" height=\"50%\"/><img src=\"../img_slides/Iris_parts.png\" width=\"28%\" height=\"50%\"/></center>\n\n[Gareth Duffy](https://github.com/Datagatherer2357/Gareth-Duffy-GMIT-Project)\n\n## View the `iris` dataset\n\n-   The `iris` dataset is already pre-loaded in *base* R and ready to use.\n-   Type the following command in the console window\n    -   *Warning: this command cannot be rendered. It will give an error.*\n\n \n\n::: columns\n::: {.column width=\"37%\"}\n\n::: {.cell}\n\n```{.r .cell-code}\nView(iris)\n```\n:::\n\n\nA new tab in the scripting window should appear with the `iris` dataset.\n:::\n\n::: {.column width=\"63%\"}\n![](../img_slides/screenshot_iris_View.png){fig-align=\"center\"}\n:::\n:::\n\n## Data structure (1/2)\n\n-   What are the different **variable types** in this data set?\n\n- We are going to use the `str` function\n\n  - Can you use the console to tell me what we can input into `str`?\n\n\n## Data structure (2/2)\n\n-   What are the different **variable types** in this data set?\n\n- We are going to use the `str` function\n\n  - Can you use the console to tell me what we can input into `str`?\n\n\\\n\n\n::: {.cell}\n\n```{.r .cell-code}\nstr(iris)   # structure of data\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n'data.frame':\t150 obs. of  5 variables:\n $ Sepal.Length: num  5.1 4.9 4.7 4.6 5 5.4 4.6 5 4.4 4.9 ...\n $ Sepal.Width : num  3.5 3 3.2 3.1 3.6 3.9 3.4 3.4 2.9 3.1 ...\n $ Petal.Length: num  1.4 1.4 1.3 1.5 1.4 1.7 1.4 1.5 1.4 1.5 ...\n $ Petal.Width : num  0.2 0.2 0.2 0.2 0.2 0.4 0.3 0.2 0.2 0.1 ...\n $ Species     : Factor w/ 3 levels \"setosa\",\"versicolor\",..: 1 1 1 1 1 1 1 1 1 1 ...\n```\n:::\n:::\n\n\n## Data set summary\n\n-   Can we quickly summarize all the data?\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsummary(iris)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n  Sepal.Length    Sepal.Width     Petal.Length    Petal.Width   \n Min.   :4.300   Min.   :2.000   Min.   :1.000   Min.   :0.100  \n 1st Qu.:5.100   1st Qu.:2.800   1st Qu.:1.600   1st Qu.:0.300  \n Median :5.800   Median :3.000   Median :4.350   Median :1.300  \n Mean   :5.843   Mean   :3.057   Mean   :3.758   Mean   :1.199  \n 3rd Qu.:6.400   3rd Qu.:3.300   3rd Qu.:5.100   3rd Qu.:1.800  \n Max.   :7.900   Max.   :4.400   Max.   :6.900   Max.   :2.500  \n       Species  \n setosa    :50  \n versicolor:50  \n virginica :50  \n                \n                \n                \n```\n:::\n:::\n\n\n## Data set info\n\n-   You can use different functions to find information on a data frame\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndim(iris)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 150   5\n```\n:::\n\n```{.r .cell-code}\nnrow(iris)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 150\n```\n:::\n\n```{.r .cell-code}\nncol(iris)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 5\n```\n:::\n\n```{.r .cell-code}\nnames(iris)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"Sepal.Length\" \"Sepal.Width\"  \"Petal.Length\" \"Petal.Width\"  \"Species\"     \n```\n:::\n:::\n\n\n-   We can also look at the `Environment` section\n\n## Take a moment to find the information on the iris data frame\n\n- Go to environment section to see the `iris` data frame\n\n## View the beginning or end of a dataset\n\n- These commands can be helpful if the data frame has a lot of rows\n\n::: {.cell}\n\n```{.r .cell-code}\nhead(iris)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n  Sepal.Length Sepal.Width Petal.Length Petal.Width Species\n1          5.1         3.5          1.4         0.2  setosa\n2          4.9         3.0          1.4         0.2  setosa\n3          4.7         3.2          1.3         0.2  setosa\n4          4.6         3.1          1.5         0.2  setosa\n5          5.0         3.6          1.4         0.2  setosa\n6          5.4         3.9          1.7         0.4  setosa\n```\n:::\n\n```{.r .cell-code}\ntail(iris)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n    Sepal.Length Sepal.Width Petal.Length Petal.Width   Species\n145          6.7         3.3          5.7         2.5 virginica\n146          6.7         3.0          5.2         2.3 virginica\n147          6.3         2.5          5.0         1.9 virginica\n148          6.5         3.0          5.2         2.0 virginica\n149          6.2         3.4          5.4         2.3 virginica\n150          5.9         3.0          5.1         1.8 virginica\n```\n:::\n:::\n\n\n## Specify how many rows to view at beginning or end of a dataset\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhead(iris, 3)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n  Sepal.Length Sepal.Width Petal.Length Petal.Width Species\n1          5.1         3.5          1.4         0.2  setosa\n2          4.9         3.0          1.4         0.2  setosa\n3          4.7         3.2          1.3         0.2  setosa\n```\n:::\n\n```{.r .cell-code}\ntail(iris, 2)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n    Sepal.Length Sepal.Width Petal.Length Petal.Width   Species\n149          6.2         3.4          5.4         2.3 virginica\n150          5.9         3.0          5.1         1.8 virginica\n```\n:::\n:::\n\n\n## Some sources for useful base R commands\n\n-   <https://sites.calvin.edu/scofield/courses/m143/materials/RcmdsFromClass.pdf>\n-   <https://www2.kenyon.edu/Depts/Math/hartlaub/Math206%20Spring2011/R.htm>\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-in-header": [
        "<link href=\"../../site_libs/countdown-0.4.0/countdown.css\" rel=\"stylesheet\" />\n<script src=\"../../site_libs/countdown-0.4.0/countdown.js\"></script>\n"
      ],
      "include-after-body": [
        "\n<script>\n  // htmlwidgets need to know to resize themselves when slides are shown/hidden.\n  // Fire the \"slideenter\" event (handled by htmlwidgets.js) when the current\n  // slide changes (different for each slide format).\n  (function () {\n    // dispatch for htmlwidgets\n    function fireSlideEnter() {\n      const event = window.document.createEvent(\"Event\");\n      event.initEvent(\"slideenter\", true, true);\n      window.document.dispatchEvent(event);\n    }\n\n    function fireSlideChanged(previousSlide, currentSlide) {\n      fireSlideEnter();\n\n      // dispatch for shiny\n      if (window.jQuery) {\n        if (previousSlide) {\n          window.jQuery(previousSlide).trigger(\"hidden\");\n        }\n        if (currentSlide) {\n          window.jQuery(currentSlide).trigger(\"shown\");\n        }\n      }\n    }\n\n    // hookup for slidy\n    if (window.w3c_slidy) {\n      window.w3c_slidy.add_observer(function (slide_num) {\n        // slide_num starts at position 1\n        fireSlideChanged(null, w3c_slidy.slides[slide_num - 1]);\n      });\n    }\n\n  })();\n</script>\n\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}