{
  "hash": "0fb439faf2eb55bc64cf9d6d8a0b8e1d",
  "result": {
    "markdown": "---\ntitle: \"Lesson 1: Intro to R & Rstudio\"\nauthor: \"Meike Niederhausen and Nicky Wakim\"\ntitle-slide-attributes:\n    data-background-color: \"#3070BF\"\ndate: \"09/30/2024\"\ncategories: [\"Week 1\"]\nformat: \n  revealjs:\n    theme: \"../simple_NW.scss\"\n    toc: true\n    toc-depth: 1\n    toc-title: Class Overview\n    chalkboard: true\n    slide-number: true\n    show-slide-number: all\n    width: 1600\n    height: 1100\n    footer: Lesson 1 Slides\n    html-math-method: mathjax\n    highlight-style: arrow\nexecute:\n  echo: true\n  freeze: auto\n---\n\n\n\n\n\n\n# Introduction to R\n\n![[Artwork by @allison_horst](https://allisonhorst.com/everything-else)](../img_slides/horst_welcome_R.png){fig-align=\"center\"}\n\n\n## What is R?\n\n::: columns\n::: {.column width=\"70%\"}\n- A programming language\n- Focus on statistical modeling and data analysis\n    + import data, manipulate data, run statistics, make plots\n- Useful for data science\n- Great visualizations\n- Also useful for most anything else you'd want to tell a computer to do\n- Interfaces with other languages i.e. python, C++, bash\n\n:::\n\n\n::: {.column width=\"30%\"}\n![](../img_slides/R_logo.png)\n:::\n:::\n\n\nFor the history and details: [Wikipedia](https://bit.ly/1efFmaY)\n\n- an interpreted language (run it through a command line)\n- procedural programming with functions\n- Why \"R\"?? Scheme inspired S (invented at Bell Labs in 1976) which inspired R since 1st letters of original authors (**free and open source!** in 2000)\n\n\n\n\n\n## What is RStudio? \n\n::: columns\n::: {.column width=\"50%\"}\nR is a programming language\n:::\n\n::: {.column width=\"50%\"}\nRStudio is an integrated development environment (IDE)   \n= an interface to use R (with perks!)\n:::\n:::\n\n![[Modern Dive](https://moderndive.com/1-getting-started.html#r-rstudio)](../img_slides/r_vs_rstudio_1.png){fig-align=\"center\"}\n\n\n## Open RStudio on your computer (not R!)\n\n![[Modern Dive](https://moderndive.com/1-getting-started.html#using-r-via-rstudio)](/img_slides/01_md_r.png){fig-align=\"center\"}\n\n\n## RStudio anatomy \n\n\n![[Emma Rand](http://www-users.york.ac.uk/~er13/17C%20-%202018/pracs/01IntroductionToModuleAndRStudio.html#what_are_r_and_rstudio)](/img_slides/RStudio_Anatomy.svg){fig-align=\"center\"}\n\nRead more about RStudio's layout in Section 3.4 of \"[Getting Used to R, RStudio, and R Markdown](https://rbasics.netlify.com/3-rstudiobasics.html#rstudio-layout)\" (Ismay and Kennedy 2016) \n\n\n# Let's code! R Basics \n\n![[Artwork by @allison_horst](https://allisonhorst.com/everything-else)](/img_slides/horst_timeline_Rlearning.png){fig-align=\"center\"}\n\n\n## Coding in the console  \n \n::: columns\n::: {.column width=\"50%\"}\nWhen you first open R, the console should be empty.\n\n![](/img_slides/01_console_empty.png){fig-align=\"center\"}\n:::\n\n::: {.column width=\"50%\"}\n__Typing and executing code in the console __\n\n* Type code in the console (blue text)\n* Press __return__ to execute the code\n* Output shown below in black\n\n![](/img_slides/01_console_commands2.png){fig-align=\"center\"}\n:::\n:::\n\n\n## Math calculations using R\n\n* Rules for order of operations are followed\n* Spaces between numbers and characters are ignored\n\n::: columns\n::: {.column width=\"50%\"}\n\n\n::: {.cell}\n\n```{.r .cell-code}\n10^2\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 100\n```\n:::\n\n```{.r .cell-code}\n3 ^ 7\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 2187\n```\n:::\n\n```{.r .cell-code}\n6/9\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 0.6666667\n```\n:::\n\n```{.r .cell-code}\n9-43\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] -34\n```\n:::\n:::\n\n\n:::\n\n::: {.column width=\"50%\"}\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n4^3-2* 7+9 /2\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 54.5\n```\n:::\n:::\n\n\n\nThe equation above is computed as $$4^3 − (2 \\cdot 7) + \\frac{9}{2}$$ \n:::\n:::\n\n\n## Variables (saved R objects) \n\nVariables are used to store data, figures, model output, etc.\n\n::: columns\n::: {.column width=\"49%\"}\n* Can assign a variable using either `=` or `<-`\n    - __Using `<-` is preferable__\n\nAssign just one value:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nx = 5\nx\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 5\n```\n:::\n\n```{.r .cell-code}\nx <- 5\nx\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 5\n```\n:::\n:::\n\n\n:::\n\n::: {.column width=\"2%\"}\n:::\n\n::: {.column width=\"49%\"}\nAssign a __vector__ of values\n\n* Consecutive integers using `:`\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\na <- 3:10\na\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1]  3  4  5  6  7  8  9 10\n```\n:::\n:::\n\n\n\n* __Concatenate__ a string of numbers\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nb <- c(5, 12, 2, 100, 8)\nb\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1]   5  12   2 100   8\n```\n:::\n:::\n\n\n:::\n:::\n\n\n## Doing math with variables\n\n::: columns\n::: {.column width=\"50%\"}\nMath using variables with just one value\n\n\n::: {.cell}\n\n```{.r .cell-code}\nx <- 5\nx\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 5\n```\n:::\n\n```{.r .cell-code}\nx + 3\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 8\n```\n:::\n\n```{.r .cell-code}\ny <- x^2\ny\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 25\n```\n:::\n:::\n\n\n:::\n\n::: {.column width=\"50%\"}\nMath on vectors of values:  \n__element-wise__ computation\n\n\n::: {.cell}\n\n```{.r .cell-code}\na <- 3:6\na\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 3 4 5 6\n```\n:::\n\n```{.r .cell-code}\na+2; a*3\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 5 6 7 8\n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\n[1]  9 12 15 18\n```\n:::\n\n```{.r .cell-code}\na*a\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1]  9 16 25 36\n```\n:::\n:::\n\n\n:::\n:::\n\n## Variables can include text (characters)\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhi <- \"hello\"\nhi\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"hello\"\n```\n:::\n\n```{.r .cell-code}\ngreetings <- c(\"Guten Tag\", \"Hola\", hi)\ngreetings\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"Guten Tag\" \"Hola\"      \"hello\"    \n```\n:::\n:::\n\n\n\n\n## Using functions\n\n* `mean()` is an example of a function\n* functions have \"arguments\" that can be specified within the `()`\n* `?mean` in console will show help file for `mean()`\n\n::: columns\n::: {.column width=\"50%\"}\nFunction <font color=\"darkorange\">arguments specified</font> by name:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmean(x = 1:4)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 2.5\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nseq(from = 1, to = 12, by = 3)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1]  1  4  7 10\n```\n:::\n\n```{.r .cell-code}\nseq(by = 3, to = 12, from = 1)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1]  1  4  7 10\n```\n:::\n:::\n\n\n:::\n\n::: {.column width=\"50%\"}\nFunction <font color=\"darkorange\">arguments not specified</font>, but listed in order:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmean(1:4)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 2.5\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nseq(1, 12, 3)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1]  1  4  7 10\n```\n:::\n:::\n\n\n\n:::\n:::\n\n\n## Common console errors (1/2)\n \n__Incomplete commands__ \n\n::: columns\n::: {.column width=\"50%\"}\n* When the console is waiting for a new command, the prompt line begins with `>`\n  + If the console prompt is `+`, then a previous command is incomplete\n  + You can finish typing the command in the console window\n:::\n   \n::: {.column width=\"50%\"}\nExample:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n> 3 + (2*6\n+ )\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 15\n```\n:::\n:::\n\n\n:::\n:::\n\n\n## Common console errors (2/2)\n\n__Object is not found__\n\n* This happens when text is entered for a non-existent variable (object)\n\nExample:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhello\n```\n\n::: {.cell-output .cell-output-error}\n```\nError in eval(expr, envir, enclos): object 'hello' not found\n```\n:::\n:::\n\n\n\n* Can be due to missing quotes\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ninstall.packages(dplyr) \n```\n\n::: {.cell-output .cell-output-error}\n```\nError in eval(expr, envir, enclos): object 'dplyr' not found\n```\n:::\n\n```{.r .cell-code}\n# correct code is: install.packages(\"dplyr\")\n```\n:::\n\n\n\n\n# Saving your work with Quarto\n\nor, creating reproducible reports\n\n![[Artwork by @allison_horst](https://allisonhorst.com/r-packages-functions)](/img_slides/horst_rmarkdown_wizards_quarto.png){fig-align=\"center\"}\n\n## Example: creating an html file\n\n::: columns\n::: {.column width=\"50%\"}\n.qmd file\n![](/img_slides/01_qmd_screenshot.png){fig-align=\"center\"}\n:::\n\n::: {.column width=\"50%\"}\nhtml output  \n![](/img_slides/default_quarto_html.png){fig-align=\"center\"}\n:::\n:::\n\n\n## Quarto = `.qmd` file = Code + text\n\n`knitr` is a package that converts `.qmd` files containing code + markdown syntax to a plain text `.md` markdown file, and then to other formats (html, pdf, Word, etc)\n\n![[Artwork from \"Hello, Quarto\" keynote by Julia Lowndes and Mine Çetinkaya-Rundel, presented at RStudio Conference 2022. Illustrated by Allison Horst.](https://allisonhorst.com/cetinkaya-rundel-lowndes-quarto-keynote)](/img_slides/horst_quarto_schematic2.png){fig-align=\"center\"}\n\n\n\n\n\n\n\n# Basic Quarto example\n\n![[Artwork from \"Hello, Quarto\" keynote by Julia Lowndes and Mine Çetinkaya-Rundel, presented at RStudio Conference 2022. Illustrated by Allison Horst.](https://allisonhorst.com/cetinkaya-rundel-lowndes-quarto-keynote)](/img_slides/horst_quarto_moon_penguins.png){fig-align=\"center\"}\n\n\n##  1. Create a Quarto file (`.qmd`) \n\n**Two options:**\n\n1. click on File $\\rightarrow$ New File $\\rightarrow$ Quarto Document...$\\rightarrow$ OK, \n1. or in upper left corner of RStudio click on ![](/img_slides/green_plus_create_file.png){width=\"70\"}\n$\\rightarrow$ \n![](/img_slides/select_quarto_option.png){width=\"250\"}\n\n\n::: columns\n::: {.column width=\"50%\"}\n**Pop-up window selections:**\n\n* Enter a title and your name\n* Select `HTML` output format (default)\n* Engine: select `Knitr`\n* Editor: Select `Use visual markdown editor`\n* Click `Create`\n:::\n\n::: {.column width=\"50%\"}\n\n![](/img_slides/01_qmd_screenshot_popup.png)\n:::\n:::\n\n##  2. Create a Quarto file (`.qmd`) \n   \n* After clicking on `Create`, you should then see the following in your editor window:\n\n![](/img_slides/01_qmd_screenshot.png){fig-align=\"center\"}\n\n## 3. Save the Quarto file (`.qmd`) \n\n* __Save the file__ by \n    + selecting `File -> Save`, \n    + or clicking on ![](/img_slides/01_Script_Save.png){width=\"33\" height=\"24\"} (towards the left above the scripting window),\n    + or keyboard shortcut\n        * PC:   _Ctrl + s_\n        * Mac:   _Command + s_\n        \n\n* You will need to specify\n    + a __filename__ to save the file as\n        - ALWAYS use __.qmd__ as the filename extension for Quarto files\n    + the __folder__ to save the file in\n\n\n## 4. Create html file \n\nWe create the html file by **rendering** the .qmd file.  \n\nTwo options:\n\n1. click on the Render icon ![](/img_slides/render_icon.png) at the top of the editor window, \n1. or use keyboard shortcuts\n    * Mac: *Command+Shift+K* \n    * PC:  *Ctrl+Shift+K*\n\n* A new window will open with the html output.\n* You will now see both .qmd and .html files in the folder where you saved the .qmd file.\n\n\n:::{.callout-note}\n* The template .qmd file that RStudio creates will render to an html file by default.\n* The output format can be changed to create a Word doc, pdf, slides, etc.\n:::\n\n## .qmd file vs. its html output \n\n::: columns\n::: {.column width=\"50%\"}\n.qmd file\n![](/img_slides/01_qmd_screenshot.png){fig-align=\"center\"}\n:::\n\n::: {.column width=\"50%\"}\nhtml output  \n![](/img_slides/default_quarto_html.png){fig-align=\"center\"}\n\n:::\n:::\n\n\n# 3 types of Quarto content\n\n1. [*Text*, lists, images, tables, links]{style=\"color:darkorange\"}\n2. Code chunks\n3. YAML metadata \n\n![[Illustration by Alison Hill and Allison Horst, for RStudio.](https://allisonhorst.com/horst-hill-collaborations)](/img_slides/horst_hedgehog_text_code.png){fig-align=\"center\"}\n\n## Formatting text  \n\n* __bold__, _italics_, super^scripts^ & sub~scripts~, ~~strikethrough~~, `verbatim`, etc. \\\n\\\n\n\n* Text is formatted through a markup language called `Markdown` ([Wikipedia](https://en.wikipedia.org/wiki/Markdown))\n    * Other markup languages include html (webapges) and LaTeX (math)\n    * All text formatting is specified via *code*\n    * \"Markdown is a plain text format that is designed to be easy to write, and, even more importantly, easy to read\" [^1]\n* Newer versions of RStudio include a `Visual editor` as well that makes formatting text similar to using a word processor. \n\n\n![](/img_slides/visual_editor_quarto.png){fig-align=\"center\"}\n\n[^1]: From Quarto's Markdown Basics webpage, https://quarto.org/docs/authoring/markdown-basics.html\n\n## Formatting text: `Visual editor`  \n\n* Using the `Visual editor` is similar to using a wordprocessor, such as Word\n* Keyboard shortcuts usually work as well (_shown for Mac below_)\n\n![](/img_slides/visual_editor_options_expanded_quarto.png){fig-align=\"center\"}\n\n## Practice \n\n1.  Part 1\n    1.  Using the visual editor, practice formatting text in your qmd file, such as making text **bold**, *italicized*, and in `code` format.\n    2.  Add 1^st^, 2^nd^, and 3^rd^ level headers\n    3.  Add a list with a\n        -   sub-list (bullet and/or numbered)\n    4.  Add a table\n    5.  Add whatever else you are interested in!\n2.  Part 2\n    1.  Switch back to the `Source` editor and examine the markdown code that was used for the formatting.\n\n**Questions**:\n\n1.  What went smoothly?\n2.  What hurdles did you encounter?\n\n\n## Formatting text: `Markdown` \n\n+---------------------------------------------------+---------------------------------------------------+\n| Markdown:                                         | Output:                                           |\n+===================================================+===================================================+\n| ```                                               | *This text is in italics*, but _so is this text_. |\n| *This text is in italics*, but _so is this text_. |                                                   |\n| ```                                               |                                                   |\n+---------------------------------------------------+---------------------------------------------------+\n| ```                                               | **Bold** also has __2 options__                   |\n| **Bold** also has __2 options__                   |                                                   |\n| ```                                               |                                                   |\n+---------------------------------------------------+---------------------------------------------------+\n| ```                                               | ~~Should this be deleted?~~                       |\n| ~~Should this be deleted?~~                       |                                                   |\n| ```                                               |                                                   |\n+---------------------------------------------------+---------------------------------------------------+\n| ```                                               | Need^super^ or~sub~ scripts?                      |\n| Need^super^ or~sub~ scripts?                      |                                                   |\n| ```                                               |                                                   |\n+---------------------------------------------------+---------------------------------------------------+\n| ```                                               | `Code is often formatted as verbatim`             |\n| `Code is often formatted as verbatim`             |                                                   |\n| ```                                               |                                                   |\n+---------------------------------------------------+---------------------------------------------------+\n| ```                                               | > This is a block quote.                          |\n| >This is a block quote.                           |                                                   |\n| ```                                               |                                                   |\n+---------------------------------------------------+---------------------------------------------------+\n\n\n<!-- : {tbl-colwidths=\"\\[50,50\\]\"} -->\n\n\n## Headers \n\n* Organize your documents using headers to create sections and subsections\n* Use `#` at the beginning of the line to create headers\n\n::: columns\n::: {.column width=\"50%\"}\nText in editor:\n\n![](/img_slides/screenshot_headers.png){fig-align=\"center\" height=\"320\"}\n\n:::\n\n::: {.column width=\"50%\"}\nOutput:\n\n![](/img_slides/screenshot_headers_out.png){fig-align=\"center\" height=\"320\"}\n\n<!-- # Header 1 -->\n\n<!-- ## Header 2 -->\n\n<!-- ### Header 3 -->\n\n<!-- #### Header 4 -->\n\n<!-- ##### Header 5 -->\n\n<!-- ###### Header 6 -->\n\n:::\n:::\n\n\n:::{.callout-important}\nMake sure there is no space before the `#`, and there IS a space after the `#`\nin order for the header to work properly.\n:::\n\n\n\n## RStudio tip\n\n\nYou can easily navigate through your .qmd file if you use headers to outline your text\n\n![](/img_slides/default_quarto_html_outline.png){fig-align=\"center\"}\n\n\n# 3 types of Quarto content\n\n1. Text, lists, images, tables, links\n2. [*Code chunks*]{style=\"color:darkorange\"}\n3. YAML metadata \n\n![[Illustration by Alison Hill and Allison Horst, for RStudio.](https://allisonhorst.com/horst-hill-collaborations)](/img_slides/horst_hedgehog_text_code.png){fig-align=\"center\"}\n\n\n## Code chunks \n\n::: columns\n::: {.column width=\"50%\"}\n.qmd file\n![](/img_slides/01_qmd_screenshot.png){fig-align=\"center\"}\n:::\n\n::: {.column width=\"50%\"}\nhtml output  \n![](/img_slides/default_quarto_html.png){fig-align=\"center\"}\n\n:::\n:::\n\n## Create a code chunk \n\n3 options to create a code chunk\n\n1. Click on ![](/img_slides/code_chunk_insert_icon.png) at top right of the editor window, or\n\n2. [__Keyboard shortcut__]{style=\"color:darkorange\"}\n\n|     |                        |\n|-----|------------------------|\n| Mac | *Command + Option + I* |\n| PC  | *Ctrl + Alt + I*       |\n\n3. `Visual editor`: Select `Insert` -> `Executable Cell` -> `R`\n\n![](/img_slides/code_chunk_insert_visual.png)\n\n\n## What does a code chunk look like? \n\nAn empty code chunk looks like this:\n\n`Visual editor`\n\n![](/img_slides/01_qmd_chunk_empty_visual.png)\n\n`Source editor`\n\n![](/img_slides/01_qmd_chunk_empty_source.png)\n\n:::{.callout-important}\nNote that a code chunks start with ` ```{r} ` and ends with ` ``` `.  Make sure there is no space before ` ``` `.\n:::\n\n## Enter and run code (1/n) \n\n* __Type R code__ inside code chunks \n* __Select code__ you want to run, by \n    - placing the cursor in the line of code you want to run, \n    - __*or*__ highlighting the code you want to run\n\n::: columns\n::: {.column width=\"50%\"}\n\n* __Run selected code__ by\n    - clicking on the ![](/img_slides/01_Script_Run.png) button in the top right corner of the scripting window and choosing `Run Selected Line(s)`, \n    - or typing one of the following key combinations:\n\n|     |                        |\n|-----|------------------------|\n| Mac | __ctrl + return__      |\n| PC  | __command + return__   |\n\n* _Where does the output appear?_\n:::\n\n::: {.column width=\"50%\"}\n\n![](/img_slides/01_qmd_coding1a.png){fig-align=\"center\"}\n\n:::\n:::\n\n## Enter and run code (2/n)\n\n::: {style=\"font-size: 80%;\"}\n* __Run all code__ in a chunk by\n    - by clicking the play button in the top right corner of the chunk\n\n* The code output appears below the code chunk\n:::\n\n![](/img_slides/01_qmd_coding2.png){fig-align=\"center\"}\n\n:::{.callout-note}\n* The output should also appear in the Console. \n* Settings can be changed so that the output appears only in the Console and not below the code chunk: \n    * Select {{< fa solid gear >}} (to right of Render button) and then _Chunk Output in Console_.\n:::\n\n\n## Useful keyboard shortcuts \n\n[Full list of keyboard shortcuts](https://support.posit.co/hc/en-us/articles/200711853-Keyboard-Shortcuts)\\\n\\ \n\n+------------------------------------------+--------------------+-----------------+\n| action                                   | mac                | windows/linux   |\n+==========================================+====================+=================+\n| Run code in qmd (or script)              | cmd + enter        | ctrl + enter    |\n+------------------------------------------+--------------------+-----------------+\n| `<-`                                     | option + -         | alt + -         |\n+------------------------------------------+--------------------+-----------------+\n| interrupt currently running command      | esc                | esc             |\n+------------------------------------------+--------------------+-----------------+\n| in console, retrieve previously run code | up/down            | up/down         |\n+------------------------------------------+--------------------+-----------------+\n| keyboard shortcut help                   | option + shift + k | alt + shift + k |\n+------------------------------------------+--------------------+-----------------+\n\n\\\n\n### Practice\n\nTry typing code below in your qmd (with shortcut) and evaluating it:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ny <- 5\ny\n```\n:::\n\n\n\n\n# 3 types of Quarto content\n\n1. Text, lists, images, tables, links\n2. Code chunks\n3. [*YAML metadata*]{style=\"color:darkorange\"} \n\n![[Illustration by Alison Hill and Allison Horst, for RStudio.](https://allisonhorst.com/horst-hill-collaborations)](/img_slides/horst_hedgehog_text_code.png){fig-align=\"center\"}\n\n\n## `YAML` metadata\n\nMany output options can be set in the **YAML metadata**, which is the *first set of code in the file starting and ending with* `---`.\n\n-   It sets the configuration specifications for the output file\n-   YAML is an acronym for \n    - *yet another markup language*, or \n    - *YAML ain't markup language*\n\n## Simple `YAML` example \n\n::: {style=\"font-size: 70%;\"}\n* The default YAML includes a **title** and **author** that appear at the top of the output file. In the example below, I also added in a **date** option\n:::\n\n::: columns \n::: {.column width=\"50%\"}\n\nYAML:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n---\ntitle: \"My first Quarto file\"\nauthor: \"Meike\"\ndate: \"9/25/2023\"\nformat: html\neditor: visual\n---\n```\n:::\n\n\n\n:::\n\n::: {.column width=\"50%\"}\nOutput:\n\n![](/img_slides/yaml_simple_output.png){fig-align=\"center\"}\n:::\n:::\n\n:::{.callout-important}\n* The YAML **must** start and end with 3 dashes `---`.\n* The first set of `---` **must** be on the very first line.\n:::\n\n\n## Change the output file type \n\n::: columns\n::: {.column width=\"35%\"}\n* The YAML specifies the format of the output file:\n    * html, Word, pdf, slides, website, book, etc.\n* This is done by changing the `format:` option \n\n:::\n\n::: {.column width=\"65%\"}\n![[Illustration by Alison Hill and Allison Horst, for RStudio.](https://allisonhorst.com/horst-hill-collaborations)](/img_slides/horst_hedgehog_output_types.png){fig-align=\"center\"}\n:::\n:::\n\n::: columns\n::: {.column width=\"40%\"}\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n---\ntitle: \"My first Quarto file\"\nauthor: \"Meike\"\ndate: \"9/25/2023\"\nformat: html\neditor: visual\n---\n```\n:::\n\n\n\n:::\n\n::: {.column width=\"60%\"}\n+------------------------+----------------------------------+\n| Output format          | YAML                             |\n+========================+==================================+\n| html                   | `format: html`                   |\n+------------------------+----------------------------------+\n| Word                   | `format: docx`                   |\n+------------------------+----------------------------------+\n| pdf[^2]                | `format: pdf`                    |\n+------------------------+----------------------------------+\n| html slides            | `format: revealjs`               |\n+------------------------+----------------------------------+\n| PPT slides             | `format: pptx`                   |\n+------------------------+----------------------------------+\n\n:::\n:::\n\n[^2]:  requires LaTeX installation \n\n## \n\n![[Artwork by @allison_horst](https://allisonhorst.com/)](/img_slides/horst_r_first_then.png){fig-align=\"center\"}\n\n\n## You WILL get frustrated while learning R! \n\nFrom Garrett Grolemund's Prologue of his book _Hands-On Programming with R_[^3]:\n\n\n> As you learn to program, you are going to get frustrated. You are learning a new language, and it will take time to become fluent. But frustration is not just natural, it’s actually a positive sign that you should watch for. Frustration is your brain’s way of being lazy; it’s trying to get you to quit and go do something easy or fun. If you want to get physically fitter, you need to push your body even though it complains. If you want to get better at programming, you’ll need to push your brain. Recognize when you get frustrated and see it as a good thing: you’re now stretching yourself. Push yourself a little further every day, and you’ll soon be a confident programmer.\n\n\n[^3]: Grolemund, Garrett. 2014. Hands-on Programming with R. O’Reilly. [https://rstudio-education.github.io/hopr/](https://rstudio-education.github.io/hopr/)\n\n\n## Resources \n\n- [Official Quarto guide:](https://quarto.org/docs/guide/) https://quarto.org/docs/guide/\n    - [Markdown basics:](https://quarto.org/docs/authoring/markdown-basics.html) https://quarto.org/docs/authoring/markdown-basics.html\n        - Text formatting, headings, linnks, images, lists, tables, equations, diagrams, page breaks, keyboard shortcuts, and more!\n    - [Code blocks:](https://quarto.org/docs/computations/r.html#code-blocks) https://quarto.org/docs/computations/r.html#code-blocks\n        - [Chunk options:](https://quarto.org/docs/computations/r.html#chunk-options) https://quarto.org/docs/computations/r.html#chunk-options\n  \n- Mine Çetinkaya-Rundel's [Quarto tip a day:](https://mine-cetinkaya-rundel.github.io/quarto-tip-a-day/) https://mine-cetinkaya-rundel.github.io/quarto-tip-a-day/      \n- Hadley Wickham's [R for Data Science:](https://r4ds.hadley.nz/) https://r4ds.hadley.nz/ \n    _ See Chapter 29 for Quarto\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}