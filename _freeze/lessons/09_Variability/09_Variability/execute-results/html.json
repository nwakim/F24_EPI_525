{
  "hash": "9bbaea6e990ea613c55d44ce3b48741a",
  "result": {
    "markdown": "---\ntitle: \"Lesson 9: Variability in estimates\"\nsubtitle: \"TB sections 4.1\"\nauthor: \"Meike Niederhausen and Nicky Wakim\"\ntitle-slide-attributes:\n    data-background-color: \"#3070BF\"\ndate: \"10/28/2024\"\nformat: \n  revealjs:\n    theme: \"../simple_NW.scss\"\n    chalkboard: true\n    slide-number: true\n    show-slide-number: all\n    width: 1600\n    height: 1100\n    footer: Lesson 2 Slides\n    html-math-method: mathjax\n    highlight-style: arrow\nexecute:\n  echo: true\n  freeze: auto\n---\n\n\n\n\n## Where are we?\n\n<br>\n<br>\n\n![](../img_slides/flowchart_511_v1.jpg){fig-align=\"center\"}\n\n\n\n\n## Goals for today\n\n__Section 4.1__\n\n* Sampling from a population\n  * population parameters vs. point estimates\n  * sampling variation\n\n* Sampling distribution of the mean\n  * Central Limit Theorem\n\n![[Artwork by @allison_horst](https://allisonhorst.com/)](../img_slides/horst_samples.png){fig-align=\"center\"}\n\n\n\n## MoRitz's tip of the day: add a code pane in RStudio\n\nDo you want to be able to view two code files side-by-side?  \nYou can do that by adding a column to the RStudio layout. \n\n![](../img_slides/rstudio_pane_add_column_MM.jpg){fig-align=\"center\"}\n\nSee [https://posit.co/blog/rstudio-1-4-preview-multiple-source-columns/](https://posit.co/blog/rstudio-1-4-preview-multiple-source-columns/) for more information.\n\n\n## Population vs. sample (from section 1.3)\n\n::: columns\n::: {.column width=\"50%\"}\n__(Target) Population__\n\n* group of interest being studied\n* group from which the sample is selected\n  - studies often have _inclusion_ and/or _exclusion_ criteria\n\n__Sample__\n\n* group on which data are collected\n* often a small subset of the population\n\n:::\n::: {.column width=\"50%\"}\n__Simple random sample (SRS)__\n\n* each individual of a population has the _same chance_ of being sampled\n* randomly sampled\n* considered best way to sample\n\n![](../img_slides/sampleRandomHealthPlan.png){fig-align=\"center\"}\n\n:::\n:::\n\n\n\n## Population parameters vs. sample statistics\n\n::: columns\n::: {.column width=\"50%\"}\n\n__Population parameter__\n\n:::\n\n::: {.column width=\"50%\"}\n__Sample statistic (point estimate)__\n\n:::\n:::\n\n\n\n\n\n## Our hypothetical population: YRBSS\n\n__[Youth Risk Behavior Surveillance System](https://www.cdc.gov/healthyyouth/data/yrbs/index.htm) (YRBSS)__\n\n* Yearly survey conducted by the US Centers for Disease Control (CDC) \n* \"A set of surveys that track behaviors that can lead to poor health in students grades 9 through 12.\"[^1]\n* Dataset `yrbss` from `oibiostat` pacakge contains responses from _n_ = 13,583 participants in 2013 for a subset of the variables included in the complete survey data\n\n[^1]: Youth Risk Behavior Surveillance System [https://www.cdc.gov/healthyyouth/data/yrbs/index.htm](https://www.cdc.gov/healthyyouth/data/yrbs/index.htm) (YRBSS)\n\n::: columns\n::: {.column width=\"50%\"}\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(oibiostat)\ndata(\"yrbss\")  #load the data\n# ?yrbss\n```\n:::\n\n:::\n::: {.column width=\"50%\"}\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndim(yrbss)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 13583    13\n```\n:::\n:::\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nnames(yrbss)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1] \"age\"                      \"gender\"                  \n [3] \"grade\"                    \"hispanic\"                \n [5] \"race\"                     \"height\"                  \n [7] \"weight\"                   \"helmet.12m\"              \n [9] \"text.while.driving.30d\"   \"physically.active.7d\"    \n[11] \"hours.tv.per.school.day\"  \"strength.training.7d\"    \n[13] \"school.night.hours.sleep\"\n```\n:::\n:::\n\n\n\n\n## Getting to know the dataset: `glimpse()`\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nglimpse(yrbss)  # from tidyverse package (dplyr)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nRows: 13,583\nColumns: 13\n$ age                      <int> 14, 14, 15, 15, 15, 15, 15, 14, 15, 15, 15, 1…\n$ gender                   <chr> \"female\", \"female\", \"female\", \"female\", \"fema…\n$ grade                    <chr> \"9\", \"9\", \"9\", \"9\", \"9\", \"9\", \"9\", \"9\", \"9\", …\n$ hispanic                 <chr> \"not\", \"not\", \"hispanic\", \"not\", \"not\", \"not\"…\n$ race                     <chr> \"Black or African American\", \"Black or Africa…\n$ height                   <dbl> NA, NA, 1.73, 1.60, 1.50, 1.57, 1.65, 1.88, 1…\n$ weight                   <dbl> NA, NA, 84.37, 55.79, 46.72, 67.13, 131.54, 7…\n$ helmet.12m               <chr> \"never\", \"never\", \"never\", \"never\", \"did not …\n$ text.while.driving.30d   <chr> \"0\", NA, \"30\", \"0\", \"did not drive\", \"did not…\n$ physically.active.7d     <int> 4, 2, 7, 0, 2, 1, 4, 4, 5, 0, 0, 0, 4, 7, 7, …\n$ hours.tv.per.school.day  <chr> \"5+\", \"5+\", \"5+\", \"2\", \"3\", \"5+\", \"5+\", \"5+\",…\n$ strength.training.7d     <int> 0, 0, 0, 0, 1, 0, 2, 0, 3, 0, 3, 0, 0, 7, 7, …\n$ school.night.hours.sleep <chr> \"8\", \"6\", \"<5\", \"6\", \"9\", \"8\", \"9\", \"6\", \"<5\"…\n```\n:::\n:::\n\n\n\n\n\n## Height & weight variables\n\n::: columns\n::: {.column width=\"50%\"}\n\n::: {.cell}\n\n```{.r .cell-code}\nyrbss %>% \n  select(height, weight) %>% \n  summary()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n     height          weight      \n Min.   :1.270   Min.   : 29.94  \n 1st Qu.:1.600   1st Qu.: 56.25  \n Median :1.680   Median : 64.41  \n Mean   :1.691   Mean   : 67.91  \n 3rd Qu.:1.780   3rd Qu.: 76.20  \n Max.   :2.110   Max.   :180.99  \n NA's   :1004    NA's   :1004    \n```\n:::\n:::\n\n:::\n::: {.column width=\"50%\"}\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data = yrbss, \n       aes(x = height)) +\n  geom_histogram()\n```\n\n::: {.cell-output-display}\n![](09_Variability_files/figure-revealjs/unnamed-chunk-7-1.png){width=960}\n:::\n:::\n\n:::\n:::\n\n\n## Transform height & weight from metric to to standard\n\nAlso, drop missing values and add a column of id values\n\n::: {.cell}\n\n```{.r .cell-code}\nyrbss2 <- yrbss %>%                 # save new dataset with new name\n  mutate(                           # add variables for \n    height.ft = 3.28084*height,     #     height in feet\n    weight.lb = 2.20462*weight      #     weight in pounds\n  ) %>% \n  drop_na(height.ft, weight.lb) %>% # drop rows w/ missing height/weight values\n  mutate(id = 1:nrow(.)) %>%        # add id column\n  select(id, height.ft, weight.lb)  # restrict dataset to columns of interest\n\nhead(yrbss2)  \n```\n\n::: {.cell-output .cell-output-stdout}\n```\n  id height.ft weight.lb\n1  1  5.675853  186.0038\n2  2  5.249344  122.9957\n3  3  4.921260  102.9998\n4  4  5.150919  147.9961\n5  5  5.413386  289.9957\n6  6  6.167979  157.0130\n```\n:::\n\n```{.r .cell-code}\ndim(yrbss2)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 12579     3\n```\n:::\n\n```{.r .cell-code}\n# number of rows deleted that had missing values for height and/or weight:\nnrow(yrbss) - nrow(yrbss2) \n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 1004\n```\n:::\n:::\n\n\n\n## `yrbss2` summary\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsummary(yrbss2)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n       id          height.ft       weight.lb     \n Min.   :    1   Min.   :4.167   Min.   : 66.01  \n 1st Qu.: 3146   1st Qu.:5.249   1st Qu.:124.01  \n Median : 6290   Median :5.512   Median :142.00  \n Mean   : 6290   Mean   :5.549   Mean   :149.71  \n 3rd Qu.: 9434   3rd Qu.:5.840   3rd Qu.:167.99  \n Max.   :12579   Max.   :6.923   Max.   :399.01  \n```\n:::\n:::\n\n\nAnother summary:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nyrbss2 %>% \n  get_summary_stats(type = \"mean_sd\") %>% \n  kable()\n```\n\n::: {.cell-output-display}\n|variable  |     n|     mean|       sd|\n|:---------|-----:|--------:|--------:|\n|id        | 12579| 6290.000| 3631.389|\n|height.ft | 12579|    5.549|    0.343|\n|weight.lb | 12579|  149.708|   37.254|\n:::\n:::\n\n\n\n## Random sample of size n = 5 from `yrbss2`\n\n::: columns\n::: {.column width=\"50%\"}\n\nTake a random sample of size n = 5 from `yrbss2`:\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(moderndive)\nsamp_n5_rep1 <- yrbss2 %>%\n  rep_sample_n(size = 5, \n               reps = 1,\n               replace = FALSE)\nsamp_n5_rep1\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 5 × 4\n# Groups:   replicate [1]\n  replicate    id height.ft weight.lb\n      <int> <int>     <dbl>     <dbl>\n1         1  5869      5.15      145.\n2         1  6694      5.41      127.\n3         1  2517      5.74      130.\n4         1  5372      6.07      180.\n5         1  5403      6.07      163.\n```\n:::\n:::\n\n\n:::\n::: {.column width=\"50%\"}\nCalculate the mean of the random sample:\n\n::: {.cell}\n\n```{.r .cell-code}\nmeans_hght_samp_n5_rep1 <- \n  samp_n5_rep1 %>% \n  summarise(\n    mean_height = mean(height.ft))\n\nmeans_hght_samp_n5_rep1\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 1 × 2\n  replicate mean_height\n      <int>       <dbl>\n1         1        5.69\n```\n:::\n:::\n\n\n:::\n:::\n\n[Would we get the same mean height if we took another sample?]{style=\"color:purple\"}\n\n\n\n## Sampling variation\n\n* If a different random sample is taken, the mean height (point estimate) will likely be different\n    * this is a result of __[sampling variation]{style=\"color:darkorange\"}__\n\n::: columns\n::: {.column width=\"50%\"}\n\nTake a 2nd random sample of size  \nn = 5 from `yrbss2`:\n\n::: {.cell}\n\n```{.r .cell-code}\nsamp_n5_rep1 <- yrbss2 %>%\n  rep_sample_n(size = 5, \n               reps = 1,\n               replace = FALSE)\nsamp_n5_rep1\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 5 × 4\n# Groups:   replicate [1]\n  replicate    id height.ft weight.lb\n      <int> <int>     <dbl>     <dbl>\n1         1  2329      6.07      182.\n2         1  8863      5.25      125.\n3         1  8058      5.84      135.\n4         1   335      6.17      235.\n5         1  4698      5.58      124.\n```\n:::\n:::\n\n:::\n::: {.column width=\"50%\"}\nCalculate the mean of the 2nd random sample:\n\n::: {.cell}\n\n```{.r .cell-code}\nmeans_hght_samp_n5_rep1 <- \n  samp_n5_rep1 %>% \n  summarise(\n    mean_height = mean(height.ft))\n\nmeans_hght_samp_n5_rep1\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 1 × 2\n  replicate mean_height\n      <int>       <dbl>\n1         1        5.78\n```\n:::\n:::\n\n:::\n:::\n\n[Did we get the same mean height with our 2nd sample?]{style=\"color:purple\"}\n\n\n## 100 random samples of size n = 5 from `yrbss2`\n\n::: columns\n::: {.column width=\"50%\"}\nTake 100 random samples of size  \nn = 5 from `yrbss2`:\n\n::: {.cell}\n\n```{.r .cell-code}\nsamp_n5_rep100 <- yrbss2 %>%\n  rep_sample_n(size = 5, \n               reps = 100,\n               replace = FALSE)\nsamp_n5_rep100\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 500 × 4\n# Groups:   replicate [100]\n   replicate    id height.ft weight.lb\n       <int> <int>     <dbl>     <dbl>\n 1         1  6483      5.51     145. \n 2         1  9899      4.92      90.0\n 3         1  6103      5.68     118. \n 4         1  2702      5.68     150. \n 5         1 11789      5.35     115. \n 6         2 10164      5.51     140. \n 7         2  5807      5.41     215. \n 8         2  9382      5.15      98.0\n 9         2  4904      6.00     196. \n10         2   229      6.07     101. \n# ℹ 490 more rows\n```\n:::\n:::\n\n\n:::\n::: {.column width=\"50%\"}\nCalculate the mean for each of the 100 random samples:\n\n::: {.cell}\n\n```{.r .cell-code}\nmeans_hght_samp_n5_rep100 <- \n  samp_n5_rep100 %>% \n  group_by(replicate) %>% \n  summarise(\n    mean_height = mean(height.ft))\n\nmeans_hght_samp_n5_rep100\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 100 × 2\n   replicate mean_height\n       <int>       <dbl>\n 1         1        5.43\n 2         2        5.63\n 3         3        5.34\n 4         4        5.70\n 5         5        5.90\n 6         6        5.37\n 7         7        5.49\n 8         8        5.60\n 9         9        5.50\n10        10        5.68\n# ℹ 90 more rows\n```\n:::\n:::\n\n:::\n:::\n\n[How close are the mean heights for each of the 100 random samples?]{style=\"color:purple\"}\n\n\n## Distribution of 100 sample mean heights (n = 5)\n::: columns\n::: {.column width=\"45%\"}\nDescribe the distribution shape. \n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(\n  means_hght_samp_n5_rep100, \n  aes(x = mean_height)) + \n  geom_histogram()\n```\n\n::: {.cell-output-display}\n![](09_Variability_files/figure-revealjs/unnamed-chunk-17-1.png){width=480}\n:::\n:::\n\n\n:::\n::: {.column width=\"55%\"}\nCalculate the mean and SD of the 100 mean heights from the 100 samples:\n\n::: {.cell}\n\n```{.r .cell-code}\nstats_means_hght_samp_n5_rep100 <- \n  means_hght_samp_n5_rep100 %>% \n  summarise(\n   mean_mean_height = mean(mean_height),\n   sd_mean_height = sd(mean_height)\n   )\nstats_means_hght_samp_n5_rep100\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 1 × 2\n  mean_mean_height sd_mean_height\n             <dbl>          <dbl>\n1             5.58          0.150\n```\n:::\n:::\n\n\n\n[Is the mean of the means close to the \"center\" of the distribution?]{style=\"color:purple\"}\n:::\n:::\n\n\n## 10,000 random samples of size n = 5 from `yrbss2`\n::: columns\n::: {.column width=\"50%\"}\nTake 10,000 random samples of size  \nn = 5 from `yrbss2`:\n\n::: {.cell}\n\n```{.r .cell-code}\nsamp_n5_rep10000 <- yrbss2 %>%\n  rep_sample_n(size = 5, \n               reps = 10000,\n               replace = FALSE)\nsamp_n5_rep10000\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 50,000 × 4\n# Groups:   replicate [10,000]\n   replicate    id height.ft weight.lb\n       <int> <int>     <dbl>     <dbl>\n 1         1  6383      5.35      126.\n 2         1  4019      5.41      107.\n 3         1  4856      5.25      135.\n 4         1  9988      5.58      120.\n 5         1  2245      6.17      270.\n 6         2 10580      5.68      155.\n 7         2  2254      5.84      159.\n 8         2  8081      5.09      110.\n 9         2 10194      5.35      115.\n10         2  7689      5.35      135.\n# ℹ 49,990 more rows\n```\n:::\n:::\n\n\n:::\n::: {.column width=\"50%\"}\nCalculate the mean for each of the 10,000 random samples:\n\n::: {.cell}\n\n```{.r .cell-code}\nmeans_hght_samp_n5_rep10000 <- \n  samp_n5_rep10000 %>% \n  group_by(replicate) %>% \n  summarise(\n    mean_height = mean(height.ft))\n\nmeans_hght_samp_n5_rep10000\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 10,000 × 2\n   replicate mean_height\n       <int>       <dbl>\n 1         1        5.55\n 2         2        5.46\n 3         3        5.49\n 4         4        5.60\n 5         5        5.47\n 6         6        5.83\n 7         7        5.68\n 8         8        5.47\n 9         9        5.37\n10        10        5.15\n# ℹ 9,990 more rows\n```\n:::\n:::\n\n:::\n:::\n\n[How close are the mean heights for each of the 10,000 random samples?]{style=\"color:purple\"}\n\n\n## Distribution of 10,000 sample mean heights (n = 5)\n::: columns\n::: {.column width=\"48%\"}\nDescribe the distribution shape. \n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(\n  means_hght_samp_n5_rep10000, \n  aes(x = mean_height)) + \n  geom_histogram()\n```\n\n::: {.cell-output-display}\n![](09_Variability_files/figure-revealjs/unnamed-chunk-21-1.png){width=480}\n:::\n:::\n\n\n:::\n::: {.column width=\"52%\"}\nCalculate the mean and SD of the 10,000 mean heights from the 10,000 samples:\n\n::: {.cell}\n\n```{.r .cell-code}\nstats_means_hght_samp_n5_rep10000 <- \n  means_hght_samp_n5_rep10000 %>% \n  summarise(\n   mean_mean_height=mean(mean_height),\n   sd_mean_height = sd(mean_height)\n   )\nstats_means_hght_samp_n5_rep10000\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 1 × 2\n  mean_mean_height sd_mean_height\n             <dbl>          <dbl>\n1             5.55          0.153\n```\n:::\n:::\n\n\n[Is the mean of the means close to the \"center\" of the distribution?]{style=\"color:purple\"}\n:::\n:::\n\n\n## 10,000 samples of size n = 30 from `yrbss2`\n::: columns\n::: {.column width=\"50%\"}\nTake 10,000 random samples of size  \nn = 30 from `yrbss2`:\n\n::: {.cell}\n\n```{.r .cell-code}\nsamp_n30_rep10000 <- yrbss2 %>%\n  rep_sample_n(size = 30, \n               reps = 10000,\n               replace = FALSE)\nsamp_n30_rep10000\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 300,000 × 4\n# Groups:   replicate [10,000]\n   replicate    id height.ft weight.lb\n       <int> <int>     <dbl>     <dbl>\n 1         1  3871      5.25      115.\n 2         1 12090      5.15      125.\n 3         1   241      5.58      119.\n 4         1  4570      5.58      140.\n 5         1  4131      5.35      143.\n 6         1 11513      5.35      135.\n 7         1  9663      5.25      125.\n 8         1  3789      5.25      160.\n 9         1   442      5.15      130.\n10         1 11528      5.51      200.\n# ℹ 299,990 more rows\n```\n:::\n:::\n\n\n:::\n::: {.column width=\"50\"}\nCalculate the mean for each of the 10,000 random samples:\n\n::: {.cell}\n\n```{.r .cell-code}\nmeans_hght_samp_n30_rep10000 <- \n  samp_n30_rep10000 %>% \n  group_by(replicate) %>% \n  summarise(mean_height = \n            mean(height.ft))\n\nmeans_hght_samp_n30_rep10000\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 10,000 × 2\n   replicate mean_height\n       <int>       <dbl>\n 1         1        5.48\n 2         2        5.63\n 3         3        5.46\n 4         4        5.46\n 5         5        5.51\n 6         6        5.54\n 7         7        5.56\n 8         8        5.51\n 9         9        5.51\n10        10        5.50\n# ℹ 9,990 more rows\n```\n:::\n:::\n\n:::\n:::\n\n[How close are the mean heights for each of the 10,000 random samples?]{style=\"color:purple\"}\n\n\n## Distribution of 10,000 sample mean heights (n = 30)\n::: columns\n::: {.column width=\"48%\"}\nDescribe the distribution shape. \n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(\n  means_hght_samp_n30_rep10000, \n  aes(x = mean_height)) + \n  geom_histogram()\n```\n\n::: {.cell-output-display}\n![](09_Variability_files/figure-revealjs/unnamed-chunk-25-1.png){width=480}\n:::\n:::\n\n\n:::\n::: {.column width=\"52%\"}\nCalculate the mean and SD of the 10,000 mean heights from the 10,000 samples:\n\n::: {.cell}\n\n```{.r .cell-code}\nstats_means_hght_samp_n30_rep10000<- \n  means_hght_samp_n30_rep10000 %>% \n  summarise(\n   mean_mean_height=mean(mean_height),\n   sd_mean_height = sd(mean_height)\n   )\nstats_means_hght_samp_n30_rep10000\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 1 × 2\n  mean_mean_height sd_mean_height\n             <dbl>          <dbl>\n1             5.55         0.0623\n```\n:::\n:::\n\n\n[Is the mean of the means close to the \"center\" of the distribution?]{style=\"color:purple\"}\n:::\n:::\n\n\n## Compare distributions of 10,000 sample mean heights when n = 5 (left) vs. n = 30 (right)\n\n[How are the center, shape, and spread similar and/or different?]{style=\"color:purple\"}\n\n::: columns\n::: {.column width=\"50%\"}\n\n::: {.cell}\n::: {.cell-output-display}\n![](09_Variability_files/figure-revealjs/unnamed-chunk-27-1.png){width=480}\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 1 × 2\n  mean_mean_height sd_mean_height\n             <dbl>          <dbl>\n1             5.55          0.153\n```\n:::\n:::\n\n\n:::\n::: {.column width=\"50%\"}\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](09_Variability_files/figure-revealjs/unnamed-chunk-28-1.png){width=480}\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 1 × 2\n  mean_mean_height sd_mean_height\n             <dbl>          <dbl>\n1             5.55         0.0623\n```\n:::\n:::\n\n:::\n:::\n\n\n## Sampling high schoolers' weights\n\n::: columns\n::: {.column width=\"100%\"}\nWhich figure is which?\n\n* Population distribution of weights\n* Sampling distribution of mean weights when $n=5$\n* Sampling distribution of mean weights when $n=30$.\n:::\n:::\n\n::: columns\n::: {.column width=\"32%\"}\nA\n\n::: {.cell}\n::: {.cell-output-display}\n![](09_Variability_files/figure-revealjs/unnamed-chunk-29-1.png){width=960}\n:::\n:::\n\n:::\n\n::: {.column width=\"32%\"}\nB\n\n::: {.cell}\n::: {.cell-output-display}\n![](09_Variability_files/figure-revealjs/unnamed-chunk-30-1.png){width=960}\n:::\n:::\n\n:::\n\n::: {.column width=\"32%\"}\nC\n\n::: {.cell}\n::: {.cell-output-display}\n![](09_Variability_files/figure-revealjs/unnamed-chunk-31-1.png){width=960}\n:::\n:::\n\n:::\n:::\n\n\n## The sampling distribution of the mean\n::: columns\n::: {.column width=\"50%\"}\n* The __[sampling distribution]{style=\"color:darkorang\"}__ of the mean is the distribution of sample means calculated from repeated random samples of _the same size_ from the same population\n\n* Our simulations show approximations of the sampling distribution of the mean for various sample sizes\n\n* The theoretical sampling distribution is based on all possible samples of a given sample size $n$.\n:::\n\n::: {.column width=\"50%\"}\n\n::: {.cell}\n::: {.cell-output-display}\n![](09_Variability_files/figure-revealjs/unnamed-chunk-32-1.png){width=960}\n:::\n:::\n\n::: {.cell}\n::: {.cell-output-display}\n![](09_Variability_files/figure-revealjs/unnamed-chunk-33-1.png){width=960}\n:::\n:::\n\n\n:::\n:::\n\n\n## The Central Limit Theorem (CLT) \n\n* For **\"large\" sample sizes** ( $n\\geq 30$ ),\n    * the __sampling distribution__ of the sample mean\n    * can be approximated by a __normal distribution__,with \n      * _mean_ equal to the _population mean_ value $\\mu$, and \n      * _standard deviation_ $\\frac{\\sigma}{\\sqrt{n}}$\n\n<!-- $$\\bar{X}\\sim N(\\mu_{\\bar{X}} = \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ , \\sigma_{\\bar{X}}= \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ )$$ -->\n<br>\n<br>\n<br>\n\n* For **small sample sizes**, if the population is known to be normally distributed, then\n    * the __sampling distribution__ of the sample mean\n    * is a __normal distribution__, with \n      * _mean_ equal to the _population mean_ value $\\mu$, and \n      * _standard deviation_ $\\frac{\\sigma}{\\sqrt{n}}$\n\n\n\n## The cutest statistics video on YouTube\n\n* _[Bunnies, Dragons and the 'Normal' World: Central Limit Theorem]{style=\"color:purple\"}_ \n    * Creature Cast from the New York Times\n    * [https://www.youtube.com/watch?v=jvoxEYmQHNM&feature=youtu.be](https://www.youtube.com/watch?v=jvoxEYmQHNM&feature=youtu.be)\n\n![](../img_slides/CLT_video_preview.png){fig-align=\"center\" width=80%}\n\n\n\n## Sampling distribution of mean heights when n = 30 (1/2)\n::: columns\n::: {.column width=\"50%\"}\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(\n  means_hght_samp_n30_rep10000, \n  aes(x = mean_height)) + \n  geom_histogram()\n```\n\n::: {.cell-output-display}\n![](09_Variability_files/figure-revealjs/unnamed-chunk-34-1.png){width=480}\n:::\n:::\n\n\n:::\n::: {.column width=\"50%\"}\n\nCLT tells us that we can model the sampling distribution of mean heights using a normal distribution.\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](09_Variability_files/figure-revealjs/unnamed-chunk-35-1.png){width=576}\n:::\n:::\n\n:::\n:::\n\n\n## Sampling distribution of mean heights when n = 30 (2/2)\n::: columns\n::: {.column width=\"65%\"}\nMean and SD of population:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n(mean_height.ft <- mean(yrbss2$height.ft))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 5.548691\n```\n:::\n\n```{.r .cell-code}\n(sd_height.ft <- sd(yrbss2$height.ft))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 0.3434949\n```\n:::\n\n```{.r .cell-code}\nsd_height.ft/sqrt(30)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 0.06271331\n```\n:::\n:::\n\n\nMean and SD of simulated sampling distribution:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nstats_means_hght_samp_n30_rep10000<- \n  means_hght_samp_n30_rep10000 %>% \n  summarise(\n   mean_mean_height=mean(mean_height),\n   sd_mean_height = sd(mean_height)\n   )\nstats_means_hght_samp_n30_rep10000\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 1 × 2\n  mean_mean_height sd_mean_height\n             <dbl>          <dbl>\n1             5.55         0.0623\n```\n:::\n:::\n\n:::\n::: {.column width=\"35%\"}\n\n::: {.cell}\n::: {.cell-output-display}\n![](09_Variability_files/figure-revealjs/unnamed-chunk-38-1.png){width=384}\n:::\n:::\n\n:::\n:::\n\n\n## Why is the mean $\\mu$ & the standard error $\\frac{\\sigma}{\\sqrt{n}}$ ?\n\n\n\n## Applying the CLT\n\nWhat is the probability that for a random sample of 30 high schoolers, that their mean height is greater than 5.6 ft?\n\n\n## Class Discussion\n\n* Slide 21: match figures to distribution (Sampling high schoolers' weights)\n\nProblems from Homework 4:\n\n* R1: Youth weights (YRBSS)\n* Book exercise: 4.2\n* Non-book exercise: Ethan Allen\n\n\n\n",
    "supporting": [
      "09_Variability_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-after-body": [
        "\n<script>\n  // htmlwidgets need to know to resize themselves when slides are shown/hidden.\n  // Fire the \"slideenter\" event (handled by htmlwidgets.js) when the current\n  // slide changes (different for each slide format).\n  (function () {\n    // dispatch for htmlwidgets\n    function fireSlideEnter() {\n      const event = window.document.createEvent(\"Event\");\n      event.initEvent(\"slideenter\", true, true);\n      window.document.dispatchEvent(event);\n    }\n\n    function fireSlideChanged(previousSlide, currentSlide) {\n      fireSlideEnter();\n\n      // dispatch for shiny\n      if (window.jQuery) {\n        if (previousSlide) {\n          window.jQuery(previousSlide).trigger(\"hidden\");\n        }\n        if (currentSlide) {\n          window.jQuery(currentSlide).trigger(\"shown\");\n        }\n      }\n    }\n\n    // hookup for slidy\n    if (window.w3c_slidy) {\n      window.w3c_slidy.add_observer(function (slide_num) {\n        // slide_num starts at position 1\n        fireSlideChanged(null, w3c_slidy.slides[slide_num - 1]);\n      });\n    }\n\n  })();\n</script>\n\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}