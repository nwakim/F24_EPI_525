---
title: "Lesson 7: Data visualization of a single variable"
author: "Nicky Wakim"
title-slide-attributes:
    data-background-color: "#3070BF"
date: "10/21/2024"
format: 
  revealjs:
    theme: "../simple_NW.scss"
    chalkboard: true
    slide-number: true
    show-slide-number: all
    width: 1955
    height: 1100
    footer: Lesson 7 Slides
    html-math-method: mathjax
    highlight-style: arrow
execute:
  echo: true
  freeze: auto
---

```{r}
#| label: "setup" 
#| include: false
#| message: false
#| warning: false

library(tidyverse)
library(lubridate)
library(janitor)
library(here)
library(oibiostat)
library(knitr)
data(frog) 

# terminal: for icons
# quarto install extension quarto-ext/fontawesome

# set ggplot theme for slides 
theme_set(theme_bw(base_size = 22))
knitr::opts_chunk$set(warning=FALSE, message=FALSE)
```

# Learning Objectives

1.  Visualize distributions of numeric data/variables using histograms and boxplots

2.  Recognize when transforming data helps make asymmetric data more symmetric (log values)

3.  Visualize distributions of categorical data/variables using frequency tables and barplots

## Where are we?

![](../img_slides/course_map.png){fig-align="center"}

## 

![Artwork by \@allison_horst](../img_slides/debugging.png){fig-alt="A cartoon of a fuzzy round monster face showing 10 different emotions experienced during the process of debugging code. The progression goes from (1) “I got this” - looking determined and optimistic; (2) “Huh. Really thought that was it.” - looking a bit baffled; (3) “...” - looking up at the ceiling in thought; (4) “Fine. Restarting.” - looking a bit annoyed; (5) “OH WTF.” Looking very frazzled and frustrated; (6) “Zombie meltdown.” - looking like a full meltdown; (7) (blank) - sleeping; (8) “A NEW HOPE!” - a happy looking monster with a lightbulb above; (9) “insert awesome theme song” - looking determined and typing away; (10) “I love coding” - arms raised in victory with a big smile, with confetti falling."}

## Why do we bother with visualizing data?[^1]

[^1]: Adapted from my Google search AI results: <https://www.google.com/search?q=why+do+statistics+bother+with+data+visualization&rlz=1C5GCEM_enUS1130&oq=why+do+statistics+bother+with+data+visu&gs_lcrp=EgZjaHJvbWUqBwgBECEYoAEyBggAEEUYOTIHCAEQIRigATIHCAIQIRigATIHCAMQIRirAtIBCDk3NDBqMGo0qAIAsAIB&sourceid=chrome&ie=UTF-8>

-   **Makes data easier to understand**

    -   helps you understand large amounts of data by turning it into a visual context, such as a graph or map

-   **Helps identify patterns**

    -   helps identify patterns, trends, and outliers in data sets. 

-   **Reveals data features**

    -   reveals data features that statistics and models might miss, such as unusual distributions, gaps, and outliers

-   **Helps with decision-making**

    -   helps with decision-making on analysis plans

## From Lesson 2: Example: the frog study[^2]

[^2]: <https://www.cdc.gov/nchs/products/databriefs/db220.htm>

In evolutionary biology, parental investment refers to the amount of time, energy, or other resources devoted towards raising offspring.

 

We will be working with the `frog` dataset, which originates from a 2013 study[^3] about maternal investment in a frog species. Reproduction is a costly process for female frogs, necessitating a trade-off between individual egg size and total number of eggs produced.

[^3]: Chen, W., et al. Maternal investment increases with altitude in a frog on the Tibetan Plateau. Journal of evolutionary biology 26.12 (2013): 2710-2715.

    ## 

 

Researchers were interested in investigating how maternal investment varies with altitude. They collected measurements on egg clutches found at breeding ponds across 11 study sites; for 5 sites, the body size of individual female frogs was also recorded.

 

 

## From Lesson 2: Four rows from frog data frame

\captionsetup[table]{labelformat=empty}

+---------+----------+----------+----------+-------------+---------------+-----------+
|         | altitude | latitude | egg.size | clutch.size | clutch.volume | body.size |
+=========+==========+==========+==========+=============+===============+===========+
| 1       | 3,462.00 | 34.82    | 1.95     | 181.97      | 177.83        | 3.63      |
+---------+----------+----------+----------+-------------+---------------+-----------+
| 2       | 3,462.00 | 34.82    | 1.95     | 269.15      | 257.04        | 3.63      |
+---------+----------+----------+----------+-------------+---------------+-----------+
| 3       | 3,462.00 | 34.82    | 1.95     | 158.49      | 151.36        | 3.72      |
+---------+----------+----------+----------+-------------+---------------+-----------+
| 150     | 2,597.00 | 34.05    | 2.24     | 537.03      | 776.25        | NA        |
+---------+----------+----------+----------+-------------+---------------+-----------+

 

-   Each **row** is an [**observation**]{style="color:#BF396F;"}
-   Each **column** is a [**variable**]{style="color:#459B99;"}
-   All the [**observations**]{style="color:#BF396F;"} and [**variables**]{style="color:#459B99;"} together make a [**data frame**]{style="color:#8043F3;"} (sometimes called data matrix)

 

-   **Missing values:** `NA` means the measured value for body size in clutch #150 is missing

## From Lesson 2: Exploring data initially

-   Techniques for exploring and summarizing data **differ** for [**numerical**]{style="color:#E75B5C;"} versus [**categorical**]{style="color:#EF85B3;"} variables.

 

-   Numerical and graphical summaries are useful for examining variables one at a time
    -   Can also be used for exploring the relationships between variables
    -   *Numerical* summaries are not just for [**numerical**]{style="color:#E75B5C;"} variables (certain ones are used for [**categorical**]{style="color:#EF85B3;"} variables)

 

-   Today we we look at ways to **visualize** a [**numerical**]{style="color:#E75B5C;"} variable and a [**categorical**]{style="color:#EF85B3;"} variable

# Learning Objectives

::: lob
1.  Visualize distributions of numeric data/variables using histograms and boxplots
:::

2.  Recognize when transforming data helps make asymmetric data more symmetric (log values)

3.  Visualize distributions of categorical data/variables using frequency tables and barplots

## Histograms

::::: columns
::: {.column width="45%"}
-   Histograms show the counts of observations (y-axis) that have values within a specific interval for a specific variable (x-axis)
-   Show the shape of the distribution and data density
-   Distribution is considered **symmetric** if the trailing parts of the plot are roughly equal
-   Distribution is considered **asymmetric** if one tail trails off more than the other (as we see with clutch volume)
-   Asymmetric distributions are said to be skewed
    -   **Skewed right** if trails off to right
    -   **Skewed left** if trails off to the left
:::

::: {.column width="55%"}
![](../img_slides/frog_hist.png){fig-align="center" fig-width="400" width="1000"}
:::
:::::

## Histograms

-   Mode is represented by the tallest peak in the distribution
-   When data have one prominent peak, we call it unimodel
-   If there is more than one relative peak, we call it multimodel

![](../img_slides/dist_1.19.png)

## Histograms

We can make a histogram of clutch volume or clutch size:

::::: columns
::: {.column width="50%"}
```{r}
#| fig.height: 7
ggplot(data = frog, 
       aes(x = clutch.volume)) +
  geom_histogram() 
```
:::

::: {.column width="50%"}
```{r}
#| fig.height: 7
ggplot(data = frog, 
       aes(x = clutch.size)) +
  geom_histogram() 
```
:::
:::::

## Poll Everywhere Question 1

## Boxplots

::::: columns
::: {.column width="43%"}
-   A **boxplot** indicates the positions of the first, second, and third quartiles of a distribution in addition to extreme observations
-   Interquartile range (IQR) represented by rectangle with black line through it for the median
-   Whiskers extend from the box to capture data that are between $Q_1$ and $Q_1 - 1.5 IQR$ and separately between $Q_3$ and $Q_3 + 1.5 IQR$
-   An **outlier** is a value that appears extreme relative to the rest of the data
    -   It is more than $1.5IQR$ away from $Q_1$ and $Q_3$
:::

::: {.column width="57%"}
![](../img_slides/boxplot_CV.png){width="1100"}
:::
:::::

## Boxplots

::::: columns
::: {.column width="50%"}
```{r}
#| fig.height: 5
#| fig.width: 6
#| code-line-numbers: "2-3"
ggplot(data = frog, 
       aes(x = clutch.volume)) + 
  geom_boxplot() 
```
:::

::: {.column width="50%"}
```{r}
#| fig.height: 6
#| fig.width: 5
#| code-line-numbers: "2-3"
ggplot(data = frog, 
       aes(y = clutch.volume)) + 
  geom_boxplot() 
```
:::
:::::

# Learning Objectives

1.  Visualize distributions of numeric data/variables using histograms and boxplots

::: lob
2.  Recognize when transforming data helps make asymmetric data more symmetric (log values)
:::

3.  Visualize distributions of categorical data/variables using frequency tables and barplots

## We may want to transform data

-   When working with strongly skewed data, it can be useful to apply a transformation

-   Common to use the **natural log transformation** on skewed data

    -   We typically just call this the "log transformation"

    -   Especially for variables with many values clustered near 0 and other observations that are positive

-   Transformations are mostly used when we make certain assumptions about the distribution of our data

    -   For a lot of statistics methods, we assume the data is distributed normally
    -   So we may need to transform the data to make it normal!

## Let's transform clutch volume!

::::: columns
::: {.column width="50%"}
```{r}
#| fig.height: 7
ggplot(data = frog, 
       aes(x = clutch.volume)) +
  geom_histogram() 
```
:::

::: {.column width="50%"}
```{r}
#| fig.height: 7
ggplot(data = frog, 
       aes(x = log(clutch.volume))) +
  geom_histogram() 
```
:::
:::::

## Poll everywhere question 2

# Learning Objectives

1.  Visualize distributions of numeric data/variables using histograms and boxplots

2.  Recognize when transforming data helps make asymmetric data more symmetric (log values)

::: lob
3.  Visualize distributions of categorical data/variables using frequency tables and barplots
:::

## From Lesson 4: Example: hypertension prevalence (1/2)

-   US CDC estimated that between 2011 and 2014[^4], 29% of the population in America had hypertension

[^4]: <https://www.cdc.gov/nchs/products/databriefs/db220.htm>

 

-   A health care practitioner seeing a new patient would expect a 29% chance that the patient might have hypertension
    -   However, this is **only the case if nothing else is known about the patient**

## From Lesson 4: Example: hypertension prevalence

-   Prevalence of **hypertension varies significantly with age**
    -   Among adults aged 18-39, 7.3% have hypertension
    -   Adults aged 40-59, 32.2%
    -   Adults aged 60 or older, 64.9% have hypertension

 

-   Knowing the age of a patient provides important information about the likelihood of hypertension

    -   Age and hypertension status are **not independent** (we will get into this)

-   While the probability of hypertension of a randomly chosen adult is 0.29...

    -   The **conditional probability** of hypertension in a person known to be 60 or older is 0.649

 

## From Lesson 4: Contingency tables

-   We can start looking at the **contingency table** for hypertension for different age groups
    -   **Contingency table:** type of data table that displays the frequency distribution of two or more categorical variables

```{r}
#| echo: false

# Create the table data
hyp_data <- data.frame(
  Age_Group = c("18-39 years", "40 to 59 years", "Greater than 60 years", "Total"),
  Hypertension = c(8836, 42109, 39917, 90862),
  No_Hypertension = c(112206, 88663, 21589, 222458),
  Total = c(121042, 130772, 61506, 313320)
)

# Generate table using kable
kable(hyp_data, col.names = c("Age Group", "Hypertension", "No Hypertension", "Total"), 
      caption = "Table: Contingency table showing hypertension status and age group, in
thousands.")
```

## Let's look at each variable separately

-   The label "contingency tables" are usually reserved for when we have two variables in one table
-   When we have one variable, we often call these **frequency tables**
    -   Shows the count of observations that fall into a specific category
-   In a **relative frequency table**, proportions for each category is shown instead of counts

::::: columns
::: column
```{r}
#| echo: false

# Create the table data
hyp_data <- data.frame(
  Age_Group = c("18-39 years", "40 to 59 years", "Greater than 60 years", "Total"),
  Counts = c(121042, 130772, 61506, 313320)
)

# Generate table using kable
kable(hyp_data, col.names = c("Age Group", "Count"), 
      caption = "Frequency table for age group variable")
```
:::

::: column
```{r}
#| echo: false

# Create the table data
hyp_data <- data.frame(
  Age_Group = c("18-39 years", "40 to 59 years", "Greater than 60 years", "Total"),
  Counts = c(round(121042/313320, 4), round(130772/313320, 4), 
             round(61506/313320, 4), round(313320/313320, 4))
)

# Generate table using kable
kable(hyp_data, col.names = c("Age Group", "Count"), 
      caption = "Relative frequency table for age group variable")
```
:::
:::::

## Barplots

-   A bar plot is a common way to display a single categorical variable
    -   Show counts (or proportion) per category for a variable

```{r}
#| echo: false

# Create the table data
hyp_data <- data.frame(
  Age_Group = c(rep("18-39 years",121042),  rep("40 to 59 years", 130772), rep("Greater than 60 years", 61506))
)
```

::::: columns
::: column
```{r}
ggplot(data = hyp_data, 
       aes(x = Age_Group)) + 
  geom_bar()
```
:::

::: column
```{r}
ggplot(data = hyp_data, 
       aes(x = Age_Group)) + 
  geom_bar(aes(y = stat(prop), 
               group = 1))
```
:::
:::::

## When to use what?

+-------------------------------+----------------------------+-------------------------------------------------------------+
| Variable type                 | Possible Visualizations    | Nicky's preferences                                         |
+===============================+============================+=============================================================+
| Numerical, discrete           | histograms, boxplots       | histograms                                                  |
+-------------------------------+----------------------------+-------------------------------------------------------------+
| Numerical, continuous         | histograms, boxplots       | histograms                                                  |
+-------------------------------+----------------------------+-------------------------------------------------------------+
| Categorical, ordinal          | frequency tables, barplots | if I'm just looking: barplot                                |
|                               |                            |                                                             |
|                               |                            | if I'm writing a report: frequency table                    |
+-------------------------------+----------------------------+-------------------------------------------------------------+
| Categorical, nominal          | frequency tables, barplots | if I'm just looking: barplot                                |
|                               |                            |                                                             |
|                               |                            | if I'm writing a report: frequency table                    |
+-------------------------------+----------------------------+-------------------------------------------------------------+
| Categorical, logical (binary) | frequency tables, barplots | frequency table or just a percent for one of the categories |
+-------------------------------+----------------------------+-------------------------------------------------------------+

## Some notes about my visualization process

-   If I am just looking at data alone, I use visualizations and summary statistics

    -   I keep everything in its basic form without polishing the output

    -   Plot labels are kept as variable name

    -   I use a basic function like `summary()` to get

        -   Mean and standard deviation for numeric variables

        -   Counts for categorical variables

-   If I am presenting visualizations or summary statistics, I will polish up everything

    -   So that someone who is unfamiliar with the data can understand what I'm looking at

        -   For example, I make sure variable names are written out and explained

 

-   **I want us to practice presenting visualizations, so I really want our homework visualizations to be polished**
